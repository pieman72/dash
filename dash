#!/bin/bash

# Initialization
STARTED=0
TRAPS_SET=0
[ -z "$DASH_ROOT" ] && DASH_ROOT="$( cd "$( dirname "$0" )" && pwd )"
[ -z "$DASH_INI_PATH" ] && DASH_INI_PATH="$HOME/.dash.ini"
if [ -f "$DASH_INI_PATH" ]; then
	function load_config(){
		RET="$(awk -F "\\\\s*=\\\\s*" "/^$1=/"' {print $2}'\
			"$DASH_INI_PATH")"
		[ -n "$RET" ] && echo $RET || echo $2
	}
else
	function load_config(){ echo $2; }
fi

# Dash basic configuration
DBG=$(load_config 'DBG' '0')
REFRESH_RATE_SECONDS=$(load_config 'REFRESH_RATE_SECONDS' '120')
SECTION_MIN_COLS=$(load_config 'SECTION_MIN_COLS' '40')
SECTION_MIN_ROWS=$(load_config 'SECTION_MIN_ROWS' '3')
GOOGLE_OAUTH_CLIENT_ID=$(load_config 'GOOGLE_OAUTH_CLIENT_ID' '')
GOOGLE_OAUTH_CLIENT_SECRET=$(load_config 'GOOGLE_OAUTH_CLIENT_SECRET' '')
GOOGLE_OAUTH_SCOPES=()
declare -A GOOGLE_OAUTH_TOKENS

# Display configuration
DISPLAY_ENCODING=$(load_config "DISPLAY_ENCODING" 'ASCII')
DISPLAY_COLOR_PALETTE=$(load_config "DISPLAY_COLOR_PALETTE" '16')
DISPLAY_ESCAPE_SPACE='`'
if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
	DISPLAY_SEPARATOR_V=$(load_config "DISPLAY_SEPARATOR_V" '│')
	DISPLAY_SEPARATOR_H=$(load_config "DISPLAY_SEPARATOR_H" '─')
	DISPLAY_SEPARATOR_C=$(load_config "DISPLAY_SEPARATOR_C" '┼')
	DISPLAY_SEPARATOR_T=$(load_config "DISPLAY_SEPARATOR_T" '┬')
	DISPLAY_SEPARATOR_B=$(load_config "DISPLAY_SEPARATOR_B" '┴')
	DISPLAY_SEPARATOR_L=$(load_config "DISPLAY_SEPARATOR_L" '├')
	DISPLAY_SEPARATOR_R=$(load_config "DISPLAY_SEPARATOR_R" '┤')
	DISPLAY_SEPARATOR_TL=$(load_config "DISPLAY_SEPARATOR_TL" '┌')
	DISPLAY_SEPARATOR_TR=$(load_config "DISPLAY_SEPARATOR_TR" '┐')
	DISPLAY_SEPARATOR_BL=$(load_config "DISPLAY_SEPARATOR_BL" '└')
	DISPLAY_SEPARATOR_BR=$(load_config "DISPLAY_SEPARATOR_BR" '┘')
	DISPLAY_RIGHT_ARROW=$(load_config "DISPLAY_RIGHT_ARROW" '▶')
	DISPLAY_LEFT_ARROW=$(load_config "DISPLAY_LEFT_ARROW" '◀')
else
	DISPLAY_SEPARATOR_V=$(load_config "DISPLAY_SEPARATOR_V" '|')
	DISPLAY_SEPARATOR_H=$(load_config "DISPLAY_SEPARATOR_H" '-')
	DISPLAY_SEPARATOR_C=$(load_config "DISPLAY_SEPARATOR_C" '+')
	DISPLAY_SEPARATOR_T=$(load_config "DISPLAY_SEPARATOR_T" '-')
	DISPLAY_SEPARATOR_B=$(load_config "DISPLAY_SEPARATOR_B" '-')
	DISPLAY_SEPARATOR_L=$(load_config "DISPLAY_SEPARATOR_L" '|')
	DISPLAY_SEPARATOR_R=$(load_config "DISPLAY_SEPARATOR_R" '|')
	DISPLAY_SEPARATOR_TL=$(load_config "DISPLAY_SEPARATOR_TL" '+')
	DISPLAY_SEPARATOR_TR=$(load_config "DISPLAY_SEPARATOR_TR" '+')
	DISPLAY_SEPARATOR_BL=$(load_config "DISPLAY_SEPARATOR_BL" '+')
	DISPLAY_SEPARATOR_BR=$(load_config "DISPLAY_SEPARATOR_BR" '+')
	DISPLAY_RIGHT_ARROW=$(load_config "DISPLAY_RIGHT_ARROW" '>')
	DISPLAY_LEFT_ARROW=$(load_config "DISPLAY_LEFT_ARROW" '<')
fi

# Color palette configuration
if [ "$DISPLAY_COLOR_PALETTE" == "256" ]; then
	COLOR_RESET="[0;39;49m"
	COLOR_BOLD="[1m"
	COLOR_ULINE="[4m"
	COLOR_BOLD_OFF="[0m"
	COLOR_ULINE_OFF="[0m"
	COLOR_NORM="[0;39m"
	COLOR_GREN="[38;5;118m"
	COLOR_LGRN="[38;5;156m"
	COLOR_BLUE="[38;5;26m"
	COLOR_LBLU="[38;5;81m"
	COLOR_RED="[38;5;160m"
	COLOR_RED2="[38;5;161m"
	COLOR_PURP="[38;5;135m"
	COLOR_ORNG="[38;5;208m"
	COLOR_YELO="[38;5;227m"
	COLOR_GRAY="[38;5;245m"
	COLOR_LGRY="[38;5;249m"
	COLOR_DGRY="[38;5;236m"
	COLOR_WHIT="[38;5;15m"
	COLOR_BLCK="[38;5;0m"
	COLOR_BG_NORM="[49m"
	COLOR_BG_GREN="[48;5;118m"
	COLOR_BG_LGRN="[48;5;156m"
	COLOR_BG_BLUE="[48;5;26m"
	COLOR_BG_LBLU="[48;5;81m"
	COLOR_BG_RED="[48;5;160m"
	COLOR_BG_RED2="[48;5;161m"
	COLOR_BG_PURP="[48;5;135m"
	COLOR_BG_ORNG="[48;5;208m"
	COLOR_BG_YELO="[48;5;227m"
	COLOR_BG_GRAY="[48;5;245m"
	COLOR_BG_LGRY="[48;5;249m"
	COLOR_BG_DGRY="[48;5;236m"
	COLOR_BG_WHIT="[48;5;15m"
	COLOR_BG_BLCK="[48;5;0m"
	COLOR_HEAT_0="[38;5;21m"
	COLOR_HEAT_1="[38;5;63m"
	COLOR_HEAT_2="[38;5;147m"
	COLOR_HEAT_3="[38;5;231m"
	COLOR_HEAT_4="[38;5;217m"
	COLOR_HEAT_5="[38;5;203m"
	COLOR_HEAT_6="[38;5;196m"
	COLOR_BG_HEAT_0="[48;5;21m"
	COLOR_BG_HEAT_1="[48;5;63m"
	COLOR_BG_HEAT_2="[48;5;147m"
	COLOR_BG_HEAT_3="[48;5;231m"
	COLOR_BG_HEAT_4="[48;5;217m"
	COLOR_BG_HEAT_5="[48;5;203m"
	COLOR_BG_HEAT_6="[48;5;196m"
elif [ "$DISPLAY_COLOR_PALETTE" == "16" ]; then
	COLOR_RESET="[0;39;49m"
	COLOR_BOLD="[1m"
	COLOR_ULINE="[4m"
	COLOR_BOLD_OFF="[0m"
	COLOR_ULINE_OFF="[0m"
	COLOR_NORM="[0;39m"
	COLOR_GREN="[32m"
	COLOR_LGRN="[1;32m"
	COLOR_BLUE="[1;34m"
	COLOR_LBLU="[1;36m"
	COLOR_RED="[31m"
	COLOR_RED2="[31m"
	COLOR_PURP="[35m"
	COLOR_ORNG="[33m"
	COLOR_YELO="[1;33m"
	COLOR_GRAY="[37m"
	COLOR_LGRY="[37m"
	COLOR_DGRY="[1;30m"
	COLOR_WHIT="[1;37m"
	COLOR_BLCK="[30m"
	COLOR_BG_NORM="[0;49m"
	COLOR_BG_GREN="[42m"
	COLOR_BG_LGRN="[1;42m"
	COLOR_BG_BLUE="[1;44m"
	COLOR_BG_LBLU="[1;46m"
	COLOR_BG_RED="[41m"
	COLOR_BG_RED2="[41m"
	COLOR_BG_PURP="[45m"
	COLOR_BG_ORNG="[43m"
	COLOR_BG_YELO="[1;43m"
	COLOR_BG_GRAY="[47m"
	COLOR_BG_LGRY="[47m"
	COLOR_BG_DGRY="[1;40m"
	COLOR_BG_WHIT="[1;47m"
	COLOR_BG_BLCK="[40m"
	COLOR_HEAT_0="[34m"
	COLOR_HEAT_1="[1;34m"
	COLOR_HEAT_2="[36m"
	COLOR_HEAT_3="[1;36m"
	COLOR_HEAT_4="[37m"
	COLOR_HEAT_5="[1;31m"
	COLOR_HEAT_6="[31m"
	COLOR_BG_HEAT_0="[44m"
	COLOR_BG_HEAT_1="[1;44m"
	COLOR_BG_HEAT_2="[46m"
	COLOR_BG_HEAT_3="[1;46m"
	COLOR_BG_HEAT_4="[47m"
	COLOR_BG_HEAT_5="[1;41m"
	COLOR_BG_HEAT_6="[41m"
elif [ "$DISPLAY_COLOR_PALETTE" == "8" ]; then
	COLOR_RESET="[0;39;49m"
	COLOR_BOLD=""
	COLOR_ULINE=""
	COLOR_BOLD_OFF=""
	COLOR_ULINE_OFF=""
	COLOR_NORM="[39m"
	COLOR_GREN="[32m"
	COLOR_LGRN="[32m"
	COLOR_BLUE="[34m"
	COLOR_LBLU="[34m"
	COLOR_RED="[31m"
	COLOR_RED2="[31m"
	COLOR_PURP="[35m"
	COLOR_ORNG="[33m"
	COLOR_YELO="[33m"
	COLOR_GRAY="[37m"
	COLOR_LGRY="[37m"
	COLOR_DGRY="[37m"
	COLOR_WHIT="[37m"
	COLOR_BLCK="[30m"
	COLOR_BG_NORM="[49m"
	COLOR_BG_GREN="[42m"
	COLOR_BG_LGRN="[42m"
	COLOR_BG_BLUE="[44m"
	COLOR_BG_LBLU="[44m"
	COLOR_BG_RED="[41m"
	COLOR_BG_RED2="[41m"
	COLOR_BG_PURP="[45m"
	COLOR_BG_ORNG="[43m"
	COLOR_BG_YELO="[43m"
	COLOR_BG_GRAY="[47m"
	COLOR_BG_LGRY="[47m"
	COLOR_BG_DGRY="[47m"
	COLOR_BG_WHIT="[47m"
	COLOR_BG_BLCK="[40m"
	COLOR_HEAT_0="[34m"
	COLOR_HEAT_1="[34m"
	COLOR_HEAT_2="[36m"
	COLOR_HEAT_3="[36m"
	COLOR_HEAT_4="[37m"
	COLOR_HEAT_5="[31m"
	COLOR_HEAT_6="[31m"
	COLOR_BG_HEAT_0="[44m"
	COLOR_BG_HEAT_1="[44m"
	COLOR_BG_HEAT_2="[46m"
	COLOR_BG_HEAT_3="[46m"
	COLOR_BG_HEAT_4="[47m"
	COLOR_BG_HEAT_5="[41m"
	COLOR_BG_HEAT_6="[41m"
fi
DISPLAY_SEPARATOR_COLOR=$(load_config "DISPLAY_SEPARATOR_COLOR" "$COLOR_DGRY")

# Control functions
function msg(){
	echo -e "$COLOR_RESET$COLOR_GRAY[Dash]$COLOR_NORM $1\n"
}
function error(){
	echo -e "$COLOR_RESET$COLOR_GRAY[Dash] $COLOR_RED""Error:$COLOR_NORM $1\n"\
		>&2
	if [ "$TRAPS_SET" -eq "1" ]; then
		read -p "$(echo -e '[Press ENTER to exit]\n\b')" TMP
	fi
	if [[ -z "$2" ]]; then exit 1; fi; exit "$2"
}
function handleWindowChange(){
	render_sections
}
function handleInterrupt(){
	exit 0
}
function handleExit(){
	stty echo
	tput rmcup
}

# Output formatting functions
function extend(){
	LEN=$(echo -en "$1" | sed "s/[^m]*m//g" | wc -m)
	if [ "$LEN" -lt "$2" ];then
		printf "%s%*s" "$1" $(($2 - $LEN)) " "
	else
		echo -n "$1"
	fi
}
function extendl(){
	LEN=$(echo -en "$1" | sed "s/[^m]*m//g" | wc -m)
	if [ "$LEN" -lt "$2" ];then
		printf "%*s%s" $(($2 - $LEN)) " " "$1"
	else
		echo -n "$1"
	fi
}
function center(){
	LEN=$(echo -en "$1" | sed "s/[^m]*m//g" | wc -m)
	if [ "$LEN" -lt "$2" ]; then
		printf "%*s%s\n" $(( ($2 - $LEN + 1) / 2)) " " "$1"
	else
		echo "$1"
	fi
}
function truncate(){
	LEN=$(echo -en "$1" | sed "s/[^m]*m//g" | wc -m)
	if [ "$LEN" -gt "$2" ];then
		echo -n "${1:0:$(( $2 - 3))}..."
	else
		echo -n "$1"
	fi
}
function centerex(){
	echo "$(extend "$(center "$1" $2)" $2)"
}
function truncatex(){
	echo "$(extend "$(truncate "$1" $2)" $2)"
}
function repeat(){
	LEN=$(echo -en "$1" | sed "s/[^m]*m//g" | wc -m)
	if [ -z "$LEN" ] || [ "$2" == "0" ]; then echo ""; return; fi
	QUO=$(( $2 / LEN ))
	REM=$(( $2 % LEN ))
	if [ "$QUO" -gt "0" ]; then
		printf "$1%.0s" `seq 1 $QUO`
	fi
	printf "%s\n" ${1:0:$REM}
}
function randomize(){
	LEN=$(( (${#1}>10?9:${#1}) - 1 ))
	RET=""
	ORDER=""
	while [ "${#ORDER}" -lt "$2" ]; do
		ORDER=$ORDER$(grep -o "[0-$LEN]"<<<$(date +%s%3N|md5sum)|paste -sd "")
	done
	for i in `seq 0 $(($2 - 1))`; do
		POS=${ORDER:$i:1}
		RET="$RET"${1:$POS:1}
	done
	echo $RET
}
function hex_to_ansi(){
	# Get the individual color components as decimals
	HEX=$(echo "$1" | tr -d '#' | tr '[:lower:]' '[:upper:]')
	DIGITS=$(( ${#HEX} / 3 ))
	R=$(( 16#${HEX:$(( DIGITS * 0 )):$DIGITS} ))
	G=$(( 16#${HEX:$(( DIGITS * 1 )):$DIGITS} ))
	B=$(( 16#${HEX:$(( DIGITS * 2 )):$DIGITS} ))

	# Handle grey ramp
	if [ "`echo $(( R-G )) | tr -d '-'`" -lt 16 ]\
			&& [ "`echo $(( R-B )) | tr -d '-'`" -lt 16 ]\
			&& [ "`echo $(( G-B )) | tr -d '-'`" -lt 16 ]; then
		GREY=$(( (R+G+B)/3 ))
		if [ "$GREY" -lt 5 ]; then CC="0"
		elif [ "$GREY" -gt 246 ]; then CC=15
		else CC=$(( (GREY-3)/10 + 232 )); fi

	# Handle 16 basic colors
	elif [ "`echo $(( R-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( G-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( B-0 )) | tr -d '-'`" -lt 24 ]; then
		CC="0"
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( B-0 )) | tr -d '-'`" -lt 24 ]; then
		CC=1
	elif [ "`echo $(( R-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-0 )) | tr -d '-'`" -lt 24 ]; then
		CC=2
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-0 )) | tr -d '-'`" -lt 24 ]; then
		CC=3
	elif [ "`echo $(( R-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( G-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=4
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=5
	elif [ "`echo $(( R-0 )) | tr -d '-'`" -lt 24 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=6
	elif [ "`echo $(( R-192 )) | tr -d '-'`" -lt 18 ]\
			&& [ "`echo $(( G-192 )) | tr -d '-'`" -lt 18 ]\
			&& [ "`echo $(( B-192 )) | tr -d '-'`" -lt 18 ]; then
		CC=7
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=8
	elif [ "`echo $(( R-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=9
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=10
	elif [ "`echo $(( R-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( G-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( B-128 )) | tr -d '-'`" -lt 14 ]; then
		CC=11
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-255 )) | tr -d '-'`" -lt 10 ]; then
		CC=12
	elif [ "`echo $(( R-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( G-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( B-255 )) | tr -d '-'`" -lt 10 ]; then
		CC=13
	elif [ "`echo $(( R-128 )) | tr -d '-'`" -lt 14 ]\
			&& [ "`echo $(( G-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( B-255 )) | tr -d '-'`" -lt 10 ]; then
		CC=14
	elif [ "`echo $(( R-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( G-255 )) | tr -d '-'`" -lt 10 ]\
			&& [ "`echo $(( B-255 )) | tr -d '-'`" -lt 10 ]; then
		CC=15

	# Handle 6x6x6 color cube
	else
		CC=16
		if [ "$R" -lt 48 ]; then :
		elif [ "$R" -lt 115 ]; then CC=$(( CC+(36*1) ))
		elif [ "$R" -lt 156 ]; then CC=$(( CC+(36*2) ))
		elif [ "$R" -lt 196 ]; then CC=$(( CC+(36*3) ))
		elif [ "$R" -lt 235 ]; then CC=$(( CC+(36*4) ))
		else CC=$(( CC+(36*5) )); fi
		if [ "$G" -lt 48 ]; then :
		elif [ "$G" -lt 115 ]; then CC=$(( CC+(6*1) ))
		elif [ "$G" -lt 156 ]; then CC=$(( CC+(6*2) ))
		elif [ "$G" -lt 196 ]; then CC=$(( CC+(6*3) ))
		elif [ "$G" -lt 235 ]; then CC=$(( CC+(6*4) ))
		else CC=$(( CC+(6*5) )); fi
		if [ "$B" -lt 48 ]; then :
		elif [ "$B" -lt 115 ]; then CC=$(( CC+1 ))
		elif [ "$B" -lt 156 ]; then CC=$(( CC+2 ))
		elif [ "$B" -lt 196 ]; then CC=$(( CC+3 ))
		elif [ "$B" -lt 235 ]; then CC=$(( CC+4 ))
		else CC=$(( CC+5 )); fi
	fi

	# Use the color for either background or foreground
	if [ -z "$2" ]; then
		echo "[38;5;"$CC"m"
	else
		echo "[48;5;"$CC"m"
	fi
}
function heat(){
	COLORS=("$COLOR_HEAT_0" "$COLOR_HEAT_1" "$COLOR_HEAT_2" "$COLOR_HEAT_3"\
		"$COLOR_HEAT_4" "$COLOR_HEAT_5" "$COLOR_HEAT_6")
	BGCOLORS=("$COLOR_BG_HEAT_0" "$COLOR_BG_HEAT_1" "$COLOR_BG_HEAT_2"\
		"$COLOR_BG_HEAT_3" "$COLOR_BG_HEAT_4" "$COLOR_BG_HEAT_5"\
		"$COLOR_BG_HEAT_6")
	RANGE="$(echo "$3 - $2" | bc -l)"
	VALUE="$(echo "$1 - $2" | tr -d "%[:alpha:]" | bc -l)"
	SCALE="$(echo "$VALUE * 7 / $RANGE" | bc -l)"
	INDEX=${SCALE%.*}
	if [ -z "$4" ]; then
		echo -en "${COLORS[$(( INDEX>6 ? 6 : INDEX ))]}$1$COLOR_RESET"
	else
		echo -en "${BGCOLORS[$(( INDEX>6 ? 6 : INDEX ))]}$1$COLOR_RESET"
	fi
}
function future_date(){
	NOW=$(date '+%s')
	if [ "$NOW" -gt "$1" ];then echo "$(past_date "$1" "$2")"; return; fi
	AGE=$(( $1 - NOW ))
	if [ "$AGE" -gt 31536000 ]; then
		DATE_STRING=$(date -d "@$1" +%F)
		DATE_COLOR=$COLOR_HEAT_0
	elif [ "$AGE" -gt 5184000 ]; then
		DATE_STRING=$(date -d "@$1" '+%_m/%d')
		DATE_COLOR=$COLOR_HEAT_1
	elif [ "$1" -gt "$(date -d 'tomorrow +1day 00:00:00' '+%s')" ]; then
		DATE_STRING=$(date -d "@$1" '+%b %e')
		DATE_COLOR=$COLOR_HEAT_2
	elif [ "$1" -gt "$(date -d 'tomorrow 00:00:00' '+%s')" ]; then
		DATE_STRING='tomorrow'
		DATE_COLOR=$COLOR_HEAT_2
	elif [ "$AGE" -gt 300 ]; then
		DATE_STRING=$(date -d "@$1" '+%l:%M%P')
		DATE_COLOR=$COLOR_HEAT_3
	elif [ "$AGE" -gt 120 ]; then
		DATE_STRING="in $(( AGE/60 )) minutes"
		DATE_COLOR=$COLOR_HEAT_4
	elif [ "$AGE" -gt 60 ]; then
		DATE_STRING="in 1 minute"
		DATE_COLOR=$COLOR_HEAT_5
	else
		DATE_STRING="now"
		DATE_COLOR=$COLOR_HEAT_6
	fi
	if [ -z "$2" ]; then
		echo $DATE_STRING
	else
		echo $DATE_COLOR$DATE_STRING$COLOR_RESET
	fi
}
function past_date(){
	NOW=$(date '+%s')
	if [ "$NOW" -lt "$1" ];then echo "$(future_date "$1" "$2")"; return; fi
	AGE=$(( NOW - $1 ))
	if [ "$AGE" -gt 31536000 ]; then
		DATE_STRING=$(date -d "@$1" +%F)
		DATE_COLOR=$COLOR_HEAT_0
	elif [ "$AGE" -gt 5184000 ]; then
		DATE_STRING=$(date -d "@$1" '+%_m/%d')
		DATE_COLOR=$COLOR_HEAT_1
	elif [ "$1" -lt "$(date -d 'today 00:00:00' +%s)" ]; then
		DATE_STRING=$(date -d "@$1" '+%b %e')
		DATE_COLOR=$COLOR_HEAT_2
	elif [ "$AGE" -gt 300 ]; then
		DATE_STRING=$(date -d "@$1" '+%l:%M%P')
		DATE_COLOR=$COLOR_HEAT_3
	elif [ "$AGE" -gt 120 ]; then
		DATE_STRING="$(( AGE/60 )) minutes ago"
		DATE_COLOR=$COLOR_HEAT_4
	elif [ "$AGE" -gt 60 ]; then
		DATE_STRING="1 minute ago"
		DATE_COLOR=$COLOR_HEAT_5
	else
		DATE_STRING="just now"
		DATE_COLOR=$COLOR_HEAT_6
	fi
	if [ -z "$2" ]; then
		echo $DATE_STRING
	else
		echo $DATE_COLOR$DATE_STRING$COLOR_RESET
	fi
}
function fmt_mem(){
	MEM=$1
	UNITS=("B KiB MiB GiB TiB PiB EiB ZiB YiB")
	for UNIT in $UNITS; do
		if [ "${MEM%.*}" -lt "1024" ]; then
			echo "$MEM$UNIT"
			return
		else
			MEM="$(echo "scale=$2; $MEM / 1024.00" | bc)"
		fi
	done
	echo $MEM"YiB"
}
function percent_bar(){
	USE_WIDTH=$(printf "%.0f" "$(echo "$1*$2" | bc)")
	USE_PERC=$(printf "%2.0f" "$(echo "$1*100" | bc)")
	RET=$4$COLOR_DGRY
	for POS in `seq 0 $(( $2-1 ))`; do
		if [ "$POS" -eq "$USE_WIDTH" ]; then
			RET=$RET$COLOR_BG_DGRY$3
		fi
		if [ "$POS" -eq "$(( ($2+1)/2 - 1 ))" ]; then
			RET=$RET${USE_PERC:0:1}
		elif [ "$POS" -eq "$(( ($2+1)/2 ))" ]; then
			RET=$RET${USE_PERC:1:1}
		elif [ "$POS" -eq "$(( ($2+1)/2 + 1 ))" ]; then
			RET=$RET"%"
		else
			RET=$RET" "
		fi
	done
	echo -n "$RET$COLOR_RESET"
}
declare -A LARGE_READ_OUT
LARGE_READ_OUT["0",0]=" XXX "
LARGE_READ_OUT["0",1]="X   X"
LARGE_READ_OUT["0",2]="X   X"
LARGE_READ_OUT["0",3]="X   X"
LARGE_READ_OUT["0",4]=" XXX "
LARGE_READ_OUT["1",0]="  X  "
LARGE_READ_OUT["1",1]=" XX  "
LARGE_READ_OUT["1",2]="  X  "
LARGE_READ_OUT["1",3]="  X  "
LARGE_READ_OUT["1",4]=" XXX "
LARGE_READ_OUT["2",0]=" XXX "
LARGE_READ_OUT["2",1]="X   X"
LARGE_READ_OUT["2",2]="  XX "
LARGE_READ_OUT["2",3]=" X   "
LARGE_READ_OUT["2",4]="XXXXX"
LARGE_READ_OUT["3",0]="XXXX "
LARGE_READ_OUT["3",1]="    X"
LARGE_READ_OUT["3",2]=" XXX "
LARGE_READ_OUT["3",3]="    X"
LARGE_READ_OUT["3",4]="XXXX "
LARGE_READ_OUT["4",0]="   X "
LARGE_READ_OUT["4",1]="  XX "
LARGE_READ_OUT["4",2]=" X X "
LARGE_READ_OUT["4",3]="XXXXX"
LARGE_READ_OUT["4",4]="   X "
LARGE_READ_OUT["5",0]="XXXXX"
LARGE_READ_OUT["5",1]="X    "
LARGE_READ_OUT["5",2]="XXXX "
LARGE_READ_OUT["5",3]="    X"
LARGE_READ_OUT["5",4]="XXXX "
LARGE_READ_OUT["6",0]=" XXXX"
LARGE_READ_OUT["6",1]="X    "
LARGE_READ_OUT["6",2]="XXXX "
LARGE_READ_OUT["6",3]="X   X"
LARGE_READ_OUT["6",4]=" XXX "
LARGE_READ_OUT["7",0]="XXXXX"
LARGE_READ_OUT["7",1]="    X"
LARGE_READ_OUT["7",2]="   X "
LARGE_READ_OUT["7",3]="  X  "
LARGE_READ_OUT["7",4]="  X  "
LARGE_READ_OUT["8",0]=" XXX "
LARGE_READ_OUT["8",1]="X   X"
LARGE_READ_OUT["8",2]=" XXX "
LARGE_READ_OUT["8",3]="X   X"
LARGE_READ_OUT["8",4]=" XXX "
LARGE_READ_OUT["9",0]=" XXX "
LARGE_READ_OUT["9",1]="X   X"
LARGE_READ_OUT["9",2]="XXXXX"
LARGE_READ_OUT["9",3]="    X"
LARGE_READ_OUT["9",4]="XXXX "
LARGE_READ_OUT["-",0]="     "
LARGE_READ_OUT["-",1]="     "
LARGE_READ_OUT["-",2]=" XXXX"
LARGE_READ_OUT["-",3]="     "
LARGE_READ_OUT["-",4]="     "
LARGE_READ_OUT["F",0]="XXXXX"
LARGE_READ_OUT["F",1]="X    "
LARGE_READ_OUT["F",2]="XXXX "
LARGE_READ_OUT["F",3]="X    "
LARGE_READ_OUT["F",4]="X    "
LARGE_READ_OUT["C",0]=" XXX "
LARGE_READ_OUT["C",1]="X   X"
LARGE_READ_OUT["C",2]="X    "
LARGE_READ_OUT["C",3]="X   X"
LARGE_READ_OUT["C",4]=" XXX "
LARGE_READ_OUT[".",0]="     "
LARGE_READ_OUT[".",1]="     "
LARGE_READ_OUT[".",2]="     "
LARGE_READ_OUT[".",3]="     "
LARGE_READ_OUT[".",4]="  X  "
LARGE_READ_OUT["°",0]=" XXX "
LARGE_READ_OUT["°",1]=" X X "
LARGE_READ_OUT["°",2]=" XXX "
LARGE_READ_OUT["°",3]="     "
LARGE_READ_OUT["°",4]="     "
LARGE_READ_OUT["'",0]=" XXX "
LARGE_READ_OUT["'",1]=" X X "
LARGE_READ_OUT["'",2]=" XXX "
LARGE_READ_OUT["'",3]="     "
LARGE_READ_OUT["'",4]="     "

# Support functions
function GCD(){
	if [ $# -ne 2 ]; then error "GCD() got incorrect arg count"; fi
	if [ $1 -le 1 ]; then error "GCD() got too small argument"; fi
	if [ $2 -le 1 ]; then error "GCD() got too small argument"; fi
	NUM=$1
	DEN=$2
	REM=$((NUM%DEN))
	until [ "$REM" -eq 0 ]; do
		NUM=$DEN
		DEN=$REM
		REM=$((NUM%DEN))
	done
	echo $DEN
}
function strip_html(){
	if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
		HTENT_SNGL_QUOT="'"
		HTENT_DASH="—"
		HTENT_APOS="’"
	else
		HTENT_SNGL_QUOT="'"
		HTENT_DASH="-"
		HTENT_APOS="'"
	fi
	PAIRED_TAGS="script\|style"
	WRAP_TAGS="a\|p\|span"
	SOLO_TAGS="br\|img"
	echo "$1"\
		| sed "s/&amp;/\&/g"\
		| sed "s/&lt;/</g"\
		| sed "s/&gt;/>/g"\
		| sed "s/&nbsp;/ /g"\
		| sed "s/&#0\?39;/$HTENT_SNGL_QUOT/g"\
		| sed "s/&#8212;/$HTENT_DASH/g"\
		| sed "s/&#8217;/$HTENT_APOS/g"\
		| sed "s/<\($PAIRED_TAGS\)[^>]*>[^<]*<\/\($PAIRED_TAGS\)[^>]*>//g"\
		| sed "s/<\($WRAP_TAGS\)[^>]*>\([^<]*\)<\/\($WRAP_TAGS\)[^>]*>/\2/g"\
		| sed "s/<\($SOLO_TAGS\)[^>]*\/[ ]*>//g"
}
function extract_json_objects(){
	DATA=$(echo "$1" | tr -d "\n")
	if [ -n "$4" ]; then DATA=$(echo "$DATA"\
		| sed "s/\"\($4\)\"\s*:\s*{\([^{}]*\)}/\"\1\": |\2|/g"); fi
	OBJECTS=$(echo "$DATA" | grep -o "{[^{}]*}")
	RESULTS=$(echo "$OBJECTS" | grep "\"$2\"\s*:\s*\"$3\"")
	if [ -z "$OBJECTS" ]; then return; fi
	REMAINDER=$(echo "$DATA" | sed "s/{[^{}]*}/\"object\"/g")
	echo -e "$(extract_json_objects "$REMAINDER" "$2" "$3")\n$RESULTS"
}
function GoogleOAuth2(){
	# From https://github.com/soulseekah/bash-utils/tree/master/google-oauth2 #
	# ======================================================================= #
	# Create a token
	if [ -z "${GOOGLE_OAUTH_TOKENS["refresh"]}" ]; then
		# Initiate an OAuth request
		REQUEST=""
		REQUEST=$REQUEST"client_id=$GOOGLE_OAUTH_CLIENT_ID"
		REQUEST=$REQUEST"&scope=$1"
		RESPONSE=$(curl --silent -d "$REQUEST"\
			"https://accounts.google.com/o/oauth2/device/code")
		ERROR=$(echo "$RESPONSE" | grep -m1 '"error"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		if [ "$ERROR" ]; then error "$ERROR"; return ""; fi

		# Extract auth parameters
		DEVICE_CODE=$(echo "$RESPONSE" | grep -m1 '"device_code"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		USER_CODE=$(echo "$RESPONSE" | grep -m1 '"user_code"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		URL=$(echo "$RESPONSE" | grep -m1 '"verification_url"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')

		# Wait for user to submit consent
		read -p "Go to '$COLOR_BLUE$COLOR_ULINE$URL$COLOR_RESET', "\
"use code '$COLOR_PURP$USER_CODE$COLOR_RESET', "\
"then come back here and press [Enter] here..."

		# Make follow-up request
		REQUEST=""
		REQUEST=$REQUEST"client_id=$GOOGLE_OAUTH_CLIENT_ID"
		REQUEST=$REQUEST"&client_secret=$GOOGLE_OAUTH_CLIENT_SECRET"
		REQUEST=$REQUEST"&code=$DEVICE_CODE"
		REQUEST=$REQUEST"&grant_type=http://oauth.net/grant_type/device/1.0"
		RESPONSE=$(curl --silent -d "$REQUEST"\
			"https://www.googleapis.com/oauth2/v3/token")
		ERROR=$(echo "$RESPONSE" | grep -m1 '"error"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		if [ "$ERROR" ]; then error "$ERROR"; return ""; fi

		# Extract the almighty tokens
		ACCESS_TOKEN=$(echo "$RESPONSE" | grep -m1 '"access_token"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		REFRESH_TOKEN=$(echo "$RESPONSE" | grep -m1 '"refresh_token"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')

	# Refresh a token
	else
		# Load the stored refresh token
		REFRESH_TOKEN=${GOOGLE_OAUTH_TOKENS["refresh"]}

		# Submit a refresh request
		REQUEST=""
		REQUEST=$REQUEST"client_id=$GOOGLE_OAUTH_CLIENT_ID"
		REQUEST=$REQUEST"&client_secret=$GOOGLE_OAUTH_CLIENT_SECRET"
		REQUEST=$REQUEST"&refresh_token=$REFRESH_TOKEN"
		REQUEST=$REQUEST"&grant_type=refresh_token"
		RESPONSE=$(curl --silent -d "$REQUEST"\
			"https://www.googleapis.com/oauth2/v3/token")
		ERROR=$(echo "$RESPONSE" | grep -m1 '"error"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
		if [ "$ERROR" ]; then error "$ERROR"; return ""; fi

		# Extract the new almighty token
		ACCESS_TOKEN=$(echo $RESPONSE | grep -m1 '"access_token"'\
			| sed 's/^[^:]*:\ *"\([^"]*\)".*$/\1/')
	fi

	# Return tokens
	echo "$ACCESS_TOKEN:$REFRESH_TOKEN"
}

# Handle CLI args
SHOW_HELP=0
if [ "$#" -lt 1 ]; then SHOW_HELP=1; fi
SECT_LIST=''
SHOW_CALENDAR=0
SHOW_EMAIL=0
SHOW_MATRIX=0
SHOW_NEWS=0
SHOW_WEATHER=0
SHOW_STATS=0
while getopt -Q -q -o 'HCEMNSWd:' -n 'dash' -- $@; do
	case "$1" in
		-H) SHOW_HELP=1;     SECT_LIST+='H'; shift ;;
		-C) SHOW_CALENDAR=1; SECT_LIST+='C'; shift ;;
		-E) SHOW_EMAIL=1;    SECT_LIST+='E'; shift ;;
		-M) SHOW_MATRIX=1;   SECT_LIST+='M'; shift ;;
		-N) SHOW_NEWS=1;     SECT_LIST+='N'; shift ;;
		-S) SHOW_STATS=1;    SECT_LIST+='S'; shift ;;
		-W) SHOW_WEATHER=1;  SECT_LIST+='W'; shift ;;
		-d) DBG=1; shift ;;
		""|--) shift; break ;;
		*) error "Unrecognized option $1" ;;
	esac
done
if [[ -n "$1" ]]; then error "Unrecognized option $1"; fi
SECT_LIST=`echo $SECT_LIST | grep -o .`

# Only in the case of the help menu being requested, print help and exit
if [ "$SHOW_HELP" = 1 ]; then
	echo -e "[1mSYNOPSIS[0m\n\
\t[1mdash[0m [[4moptions[0m]\n\n\
[1mOPTIONS[0m\n\
\t[1m-C[0m\n\
\t\tInclude a calendar readout in the output (you will be prompted for \
credentials).\n\n\
\t[1m-d[0m\n\
\t\tPrint debugging information (overrides value in your .dash.ini). No \
sections will be shown.\n\n\
\t[1m-E[0m\n\
\t\tInclude an email digest in the output (you will be prompted for \
credentials).\n\n\
\t[1m-H[0m\n\
\t\tOuput these instructions, and exit.\n\n\
\t[1m-M[0m\n\
\t\tInclude the matrix in the output\n\n\
\t[1m-N[0m\n\
\t\tInclude a news digest in the output.\n\n\
\t[1m-S[0m\n\
\t\tInclude system stats in the output (output may be reduced if run without \
privileges).\n\n\
\t[1m-W[0m\n\
\t\tInclude a weather forecast in the output.\n\n"
	exit
fi

# Additional configuration for individual sections
if [ "$SHOW_CALENDAR" = 1 ]; then
	# Get INI values
	CALENDAR_SECONDS_PER_POLL=$(load_config "CALENDAR_SECONDS_PER_POLL" "3480")
	CALENDAR_GOOGLE_CALENDARS=$(load_config "CALENDAR_GOOGLE_CALENDARS" "")

	# Define OAuth parameters
	CALENDAR_GOOGLE_URL="https://www.googleapis.com/calendar/v3"
	CALENDAR_GOOGLE_SCOPE="https://www.googleapis.com/auth/calendar.readonly"
	GOOGLE_OAUTH_SCOPES+=("$CALENDAR_GOOGLE_SCOPE")

	# Some calendar constants
	CALENDAR_MONTHS=("January" "February" "March" "April" "May" "June" "July"\
		"August" "September" "October" "November" "December")
	CALENDAR_MONTHS_SHORT=("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug"\
		"Sep" "Oct" "Nov" "Dec")
	CALENDAR_DAYS=("Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday"\
		"Saturday")
	CALENDAR_DAYS_SHORT=("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")
	CALENDAR_ORDINALS=("th" "st" "nd" "rd" "th" "th" "th" "th" "th" "th")
	CALENDAR_MONTH_LENGTHS=(31 28 31 30 31 30 31 31 30 31 30 31)
fi
if [ "$SHOW_EMAIL" = 1 ]; then
	# Get INI values
	EMAIL_SECONDS_PER_POLL=$(load_config "EMAIL_SECONDS_PER_POLL" "300")
	EMAIL_SOURCE=$(load_config "EMAIL_SOURCE" "Gmail")

	# Prompt for credentials
	read -p "Please enter the username for your $EMAIL_SOURCE account: "\
		EMAIL_USER
	read -p "Password: " -s EMAIL_PASS
	echo ""
fi
if [ "$SHOW_MATRIX" = 1 ]; then
	MATRIX_SECONDS_PER_POLL=$(load_config "MATRIX_SECONDS_PER_POLL" "60")
	MATRIX_QUOTES=(\
		"Wake up, $(whoami)..."\
		"The Matrix has you..."\
		"Follow the white rabbit..."\
		"Knock, knock, $(whoami)."\
		"Take the red pill."\
		"How do you define \"real\"?"\
		"Don't think you are, know you are."\
		"The body cannot live without the mind."\
		"There is no spoon."\
		"Have a cookie."\
		"That is the sound of inevitability."\
		"Dodge this."\
		"Free your mind."\
	);
	MATRIX_NUM_QUOTES=${#MATRIX_QUOTES[@]}
	if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
		MATRIX_CHARS=("ア" "イ" "ウ" "エ" "オ" "カ" "ガ" "キ" "ギ"
			"ク" "グ" "ケ" "ゲ" "コ" "ゴ" "サ" "ザ" "シ" "ジ" "ス"
			"ズ" "セ" "ゼ" "ソ" "ゾ" "タ" "ダ" "チ" "ヂ" "ツ" "ヅ"
			"テ" "デ" "ト" "ド" "ナ" "ニ" "ヌ" "ネ" "ノ" "ハ" "バ"
			"パ" "ヒ" "ビ" "ピ" "フ" "ブ" "プ" "ヘ" "ベ" "ペ" "ホ"
			"ボ" "ポ" "マ" "ミ" "ム" "メ" "モ" "ヤ" "ユ" "ヨ" "ラ"
			"リ" "ル" "レ" "ロ" "ワ" "ヰ" "ヱ" "ヲ" "ン" "ヴ" "・"
			"ー" "ヽ" "ヾ" "ヿ" "ㄅ" "ㄆ" "ㄇ" "ㄈ" "ㄉ" "ㄊ" "ㄋ"
			"ㄌ" "ㄍ" "ㄎ" "ㄏ" "ㄐ" "ㄑ" "ㄒ" "ㄓ" "ㄔ" "ㄕ" "ㄖ"
			"ㄗ" "ㄘ" "ㄙ" "ㄚ" "ㄛ" "ㄜ" "ㄝ" "ㄞ" "ㄟ" "ㄠ" "ㄡ"
			"ㄢ" "ㄣ" "ㄤ" "ㄥ" "ㄦ" "ㄧ" "ㄨ" "ㄩ"
		)
		MATRIX_CHAR_WIDTH=2
	else
		MATRIX_CHARS=("!" "\"" "#" "$" "%" "&" "'" "(" ")" "*" "+"
			"," "-" "." "/" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
			":" ";" "<" "=" ">" "?" "@" "A" "B" "C" "D" "E" "F" "G"
			"H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U"
			"V" "W" "X" "Y" "Z" "[" "\\" "]" "^" "_" "\`" "a"   "b"
			"c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p"
			"q" "r" "s" "t" "u" "v" "w" "x" "y" "z" "{" "|" "}" "~"
		)
		MATRIX_CHAR_WIDTH=1
	fi
fi
if [ "$SHOW_NEWS" = 1 ]; then
	NEWS_SOURCES=$(load_config "NEWS_SOURCES" "http://harveyserv.ath.cx/news")
	NEWS_SECONDS_PER_POLL=$(load_config "NEWS_SECONDS_PER_POLL" "32400")
fi
if [ "$SHOW_STATS" = 1 ]; then
	# Get INI values
	STATS_SECONDS_PER_POLL=$(load_config "STATS_SECONDS_PER_POLL" "60")
	STATS_TEMPERATURE_UNITS=$(load_config "STATS_TEMPERATURE_UNITS" "F")
	if [ "$DISPLAY_ENCODING" == 'UTF8' ]; then
		STATS_DEGREE_SYMBOL="°"
	else
		STATS_DEGREE_SYMBOL="'"
	fi
fi
if [ "$SHOW_WEATHER" = 1 ]; then
	# Get INI values
	WEATHER_SECONDS_PER_POLL=$(load_config "WEATHER_SECONDS_PER_POLL" "600")
	WEATHER_NOAA_STATION_CODE=$(load_config "WEATHER_NOAA_STATION_CODE" "KNYC")
	WEATHER_TEMPERATURE_UNITS=$(load_config "WEATHER_TEMPERATURE_UNITS" "F")
	if [ "$WEATHER_TEMPERATURE_UNITS" == 'F' ]; then
		WEATHER_TEMPERATURE_OFFSET=0
	else
		WEATHER_TEMPERATURE_OFFSET=1
		WEATHER_TEMPERATURE_UNITS='C'
	fi
	declare -A WEATHER_COLORS
	WEATHER_COLORS["Fair"]=$COLOR_YELO
	WEATHER_COLORS["A Few Clouds"]=$COLOR_YELO
	WEATHER_COLORS["A Few Clouds with Haze"]=$COLOR_YELO
	WEATHER_COLORS["Partly Cloudy"]=$COLOR_WHIT
	WEATHER_COLORS["Mostly Cloudy"]=$COLOR_LGRY
	WEATHER_COLORS["Mostly Cloudy with Haze"]=$COLOR_LGRY
	WEATHER_COLORS["Overcast with Haze"]=$COLOR_GRAY
	WEATHER_COLORS["Overcast"]=$COLOR_GRAY
	WEATHER_COLORS["Light Rain"]=$COLOR_BLUE
	WEATHER_COLORS["Rain"]=$COLOR_BLUE
	WEATHER_COLORS["Rain Fog/Mist"]=$COLOR_BLUE
	WEATHER_COLORS["Light Rain Fog/Mist"]=$COLOR_LGRY
	WEATHER_COLORS["Light Freezing Rain Fog/Mist"]=$COLOR_LBLU
	WEATHER_COLORS["Fog/Mist"]=$COLOR_LGRY
	WEATHER_COLORS["Fog"]=$COLOR_LGRY
	WEATHER_COLORS["Light Snow"]=$COLOR_WHIT
	WEATHER_COLORS["Snow"]=$COLOR_WHIT
	WEATHER_DEGREE_SYMBOL="°"
	declare -A WEATHER_BG_COLORS
	WEATHER_BG_COLORS["Fair"]=$COLOR_BG_YELO
	WEATHER_BG_COLORS["A Few Clouds"]=$COLOR_BG_YELO
	WEATHER_BG_COLORS["A Few Clouds with Haze"]=$COLOR_BG_YELO
	WEATHER_BG_COLORS["Partly Cloudy"]=$COLOR_BG_WHIT
	WEATHER_BG_COLORS["Mostly Cloudy"]=$COLOR_BG_LGRY
	WEATHER_BG_COLORS["Mostly Cloudy with Haze"]=$COLOR_BG_LGRY
	WEATHER_BG_COLORS["Overcast with Haze"]=$COLOR_BG_GRAY
	WEATHER_BG_COLORS["Overcast"]=$COLOR_BG_GRAY
	WEATHER_BG_COLORS["Light Rain"]=$COLOR_BG_BLUE
	WEATHER_BG_COLORS["Rain"]=$COLOR_BG_BLUE
	WEATHER_BG_COLORS["Rain Fog/Mist"]=$COLOR_BG_BLUE
	WEATHER_BG_COLORS["Light Rain Fog/Mist"]=$COLOR_BG_LGRY
	WEATHER_BG_COLORS["Light Freezing Rain Fog/Mist"]=$COLOR_BG_LBLU
	WEATHER_BG_COLORS["Fog/Mist"]=$COLOR_BG_LGRY
	WEATHER_BG_COLORS["Fog"]=$COLOR_BG_LGRY
	WEATHER_BG_COLORS["Light Snow"]=$COLOR_BG_WHIT
	WEATHER_BG_COLORS["Snow"]=$COLOR_BG_WHIT
	WEATHER_DEGREE_SYMBOL="°"
	declare -A WEATHER_DECORATIONS
	if [ "$DISPLAY_ENCODING" == 'UTF8' ]; then
		WEATHER_DECORATIONS["Fair"]="-$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["A Few Clouds"]="~☁$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["A Few Clouds with Haze"]="~☁░~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Partly Cloudy"]="☁~$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Mostly Cloudy"]="☁~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Mostly Cloudy with Haze"]="☁ᢆ░3~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Overcast with Haze"]="☁☁ᢆᢆ░3~"
		WEATHER_DECORATIONS["Overcast"]="☁☁☁3~"
		WEATHER_DECORATIONS["Light Rain"]="\`\`''\\\|\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Rain"]="\`\`\`\`'''\\\\\|"
		WEATHER_DECORATIONS["Rain Fog/Mist"]="\`\`'\\ᢆ☁~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Rain Fog/Mist"]="\`\`\\ᢆ☁~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Freezing Rain Fog/Mist"]="\`\`\\ᢆ☁~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Fog/Mist"]="☁ᢆᢆ░~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Fog"]="☁ᢆ░~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Snow"]=".❄$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"'"'
		WEATHER_DECORATIONS["Snow"]="❄✲❄❅❆❈❉.$DISPLAY_ESCAPE_SPACE"'"'
		WEATHER_DEGREE_SYMBOL="°"
	else
		WEATHER_DECORATIONS["Fair"]="-$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["A Few Clouds"]="~3$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["A Few Clouds with Haze"]="~3#~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Partly Cloudy"]="3~$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Mostly Cloudy"]="3~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Mostly Cloudy with Haze"]="33#~\
$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Overcast with Haze"]="333~~"
		WEATHER_DECORATIONS["Overcast"]="333~~"
		WEATHER_DECORATIONS["Light Rain"]="\`\`''\\\|\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Rain"]="\`\`\`\`'''\\\\\|"
		WEATHER_DECORATIONS["Rain Fog/Mist"]="\`\`\\'3+#~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Rain Fog/Mist"]="\`\`\\3+#~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Freezing Rain Fog/Mist"]="\`\`\\3+#~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Fog/Mist"]="3++#~\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Fog"]="3+#~$DISPLAY_ESCAPE_SPACE"
		WEATHER_DECORATIONS["Light Snow"]=".\`$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"'"'
		WEATHER_DECORATIONS["Snow"]="\`.$DISPLAY_ESCAPE_SPACE"'"'
		WEATHER_DEGREE_SYMBOL="'"
	fi
fi

# Get OAuth access, if necessary
if [ -n "${GOOGLE_OAUTH_SCOPES[@]}" ]; then
	echo "Some panels require OAuth2 authentication:"
	TOKENS_TEMP=$(GoogleOAuth2 "${GOOGLE_OAUTH_SCOPES[*]}")
	if [ -z "$TOKENS_TEMP" ]; then error "OAuth2 failed."; fi
	GOOGLE_OAUTH_TOKENS["access"]=${TOKENS_TEMP%:*}
	GOOGLE_OAUTH_TOKENS["refresh"]=${TOKENS_TEMP#*:}
fi

# Save the old screen, block input echo, and set signal traps
tput smcup
stty -echo
trap handleWindowChange WINCH
trap handleInterrupt INT
trap handleExit EXIT
TRAPS_SET=1

# Handle the actual rendering of dash sections
function render_sections(){
	# Get loop params from shell
	NEW_DATE=`date +%s`
	COLS=`tput cols`
	ROWS=`tput lines`
	SECTS=$(wc -l <<< "$SECT_LIST")
	RENDER_SECT_LIST=$SECT_LIST

	# Make sure there is enough space for anything
	if [ "$COLS" -lt "$SECTION_MIN_COLS" ] ||\
			[ "$ROWS" -lt "$SECTION_MIN_ROWS" ]; then
		clear
		msg "Screen too small!"
		read -t $REFRESH_RATE_SECONDS TMP
		continue
	fi

	# Compute optimal size per section
	BEST_X=1
	BEST_DIFF=100
	for TEMP_X in `seq 1 $SECTS`; do
		TEMP_Y=$(( SECTS/TEMP_X + (SECTS%TEMP_X ? 1 : 0) ))
		if [ "$COLS" -lt "$(( (SECTION_MIN_COLS+1)*TEMP_X-1 ))" ]\
				|| [ "$ROWS" -lt "$(( (SECTION_MIN_ROWS+1)*TEMP_Y-1 ))" ]; then
			continue
		fi
		EMPTY=$(( TEMP_X*TEMP_Y - SECTS ))
		RATING=$(( (ROWS*200/TEMP_Y) / (COLS/TEMP_X) - 100 - (EMPTY*50) ))
		DIFF="${RATING#-}"
		if [ "$DIFF" -lt "$BEST_DIFF" ]; then
			BEST_DIFF=$DIFF
			BEST_X=$TEMP_X
		fi
	done
	SECTS_X=$BEST_X
	SECTS_Y=$(( SECTS/SECTS_X + (SECTS%SECTS_X ? 1 : 0) ))
	BLANK_SECTS=$(( SECTS_X*SECTS_Y - SECTS ))
	if [ "$BLANK_SECTS" -gt "0" ]; then
		SECTS=$(( SECTS + BLANK_SECTS ))
		if [ "$BLANK_SECTS" -eq "1" ]; then
			RENDER_SECT_LIST=$(echo $RENDER_SECT_LIST; echo "_")
		else
			RENDER_SECT_LIST=$(echo $RENDER_SECT_LIST; echo "_";
				printf "\n_%.0s" $(seq 2 $BLANK_SECTS))
		fi
	fi
	BASE_COLS=$(( COLS/SECTS_X ))
	BASE_ROWS=$(( ROWS/SECTS_Y ))
	EXTRA_X=$(( COLS-SECTS_X*BASE_COLS ))
	EXTRA_Y=$(( ROWS-SECTS_Y*BASE_ROWS ))
	SECTS_PROCESSED=0
	ROWS_PROCESSED=0
	COLS_PROCESSED=0

	# Make sure there is enough space for optimal layout
	if [ "$COLS" -lt "$(( (SECTION_MIN_COLS+1)*SECTS_X-1 ))" ]\
			|| [ "$ROWS" -lt "$(( (SECTION_MIN_ROWS+1)*SECTS_Y-1 ))" ]; then
		clear
		msg "Not enough space for all tiles"
		read -t $REFRESH_RATE_SECONDS TMP
		continue
	fi

	# Print debugging info about all section metrics
	if [ "$DBG" = 1 ]; then
		msg "Sections: $SECTS"
		msg "Layout: $SECTS_X x $SECTS_Y"
		msg "Size per section: $BASE_COLS x $BASE_ROWS"
		msg "Extra: $EXTRA_X, $EXTRA_Y"
	fi

	# Inner loop to handle each particular section
	PREV_SECT=""
	for CUR_SECT in $RENDER_SECT_LIST; do
		# Figure out the specific size of this section
		CUR_X=$((SECTS_PROCESSED%SECTS_X))
		CUR_Y=$((SECTS_PROCESSED/SECTS_X))
		BORDER_LEFT=$((CUR_X>0 ? 1 : 0))
		BORDER_TOP=$((CUR_Y>0 ? 1 : 0))
		CUR_COLS=$((BASE_COLS+(CUR_X+EXTRA_X>=SECTS_X ? 1 : 0)-BORDER_LEFT))
		CUR_ROWS=$((BASE_ROWS+(CUR_Y+EXTRA_Y>=SECTS_Y ? 1 : 0)-BORDER_TOP))
		NEW_SIZE=$CUR_COLS"x"$CUR_ROWS

		# Print debugging info about specific section
		if [ "$DBG" = 1 ]; then
			msg "Section '$CUR_SECT'  Size $NEW_SIZE"
		fi

		# Initialize freshness and printing vars
		DATA_FRESH=0
		SIZE_FRESH=0
		DATE=0
		DATA=''
		SIZE='0x0'
		DRAW=()
		NEW_DATA=''
		NEW_DRAW=()

		# Get seconds per poll for this section
		if [ "$CUR_SECT" == '_' ]; then
			SECONDS_PER_POLL=100000
		elif [ "$CUR_SECT" == 'C' ]; then
			SECONDS_PER_POLL=$CALENDAR_SECONDS_PER_POLL
		elif [ "$CUR_SECT" == 'E' ]; then
			SECONDS_PER_POLL=$EMAIL_SECONDS_PER_POLL
		elif [ "$CUR_SECT" == 'M' ]; then
			SECONDS_PER_POLL=$MATRIX_SECONDS_PER_POLL
		elif [ "$CUR_SECT" == 'N' ]; then
			SECONDS_PER_POLL=$NEWS_SECONDS_PER_POLL
		elif [ "$CUR_SECT" == 'S' ]; then
			SECONDS_PER_POLL=$STATS_SECONDS_PER_POLL
		elif [ "$CUR_SECT" == 'W' ]; then
			SECONDS_PER_POLL=$WEATHER_SECONDS_PER_POLL
		fi

		# Check any previous data
		if [ -f "$DASH_ROOT/$CUR_SECT"".dash" ]; then
			# See if data is still fresh
			OLD_DATE=$(head -n 1 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
			OLD_DATA=$(head -n 2 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
			if [ $OLD_DATE -ge $((NEW_DATE-SECONDS_PER_POLL)) ];
				then
				DATA_FRESH=1

				# See if the display size is still correct
				OLD_SIZE=$(head -n 3 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
				OLD_DRAW=$(tail -n +4 "$DASH_ROOT/$CUR_SECT"".dash")
				if [ "$OLD_SIZE" == "$NEW_SIZE" ] && [ "$STARTED" == 1 ] ; then
					SIZE_FRESH=1
				fi
			fi
		fi

		# --- Blank -----------------------------------------
		if [ "$CUR_SECT" == '_' ]; then
			# Create an empty array of rows
			NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
				" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
			for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done
		fi

		# --- Calendar --------------------------------------
		if [ "$CUR_SECT" == 'C' ]; then
			# If the data is old, fetch new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ] || [ "$STARTED" -eq 0 ]; then
				# Keep a list of upcoming events
				LIST=""

				# If there are Google Calendars, fetch events from them
				if [ "$CALENDAR_GOOGLE_CALENDARS" == "true" ]; then
					# Get the access token
					ACCESS_TOKEN=${GOOGLE_OAUTH_TOKENS["access"]}

					# Pull the list of all calendars
					if [ "$DBG" = 1 ]; then msg "Fetching calendars..."; fi
					NOW=$(date "+%s")
					FEED="$(curl --silent\
						-H "Authorization: Bearer $ACCESS_TOKEN"\
						"$CALENDAR_GOOGLE_URL/users/me/calendarList")"
					FEED=$(extract_json_objects "$FEED"\
						"kind" "calendar#calendarListEntry")

					# Arrayize the calendar list entries
					OLDIFS=$IFS
					IFS=$'\n'
					CALENDARS=($FEED)
					IFS=$OLDIFS

					# Iterate through calendars
					for i in `seq 0 $(( ${#CALENDARS[@]} - 1 ))`; do
						# Dissect the calendar list entry and skip if hidden
						ENTRY=${CALENDARS[$i]}
						D_id=$(echo "$ENTRY" | sed\
							's/^.*"id"\s*:\s*"\([^"]*\)".*$/\1/')
						D_summary=$(echo "$ENTRY" | sed\
							's/^.*"summary"\s*:\s*"\([^"]*\)".*$/\1/')
						D_backgroundColor=$(echo "$ENTRY" | sed\
							's/^.*"backgroundColor"\s*:\s*"\([^"]*\)".*$/\1/')
						D_foregroundColor=$(echo "$ENTRY" | sed\
							's/^.*"foregroundColor"\s*:\s*"\([^"]*\)".*$/\1/')
						D_selected=$(echo "$ENTRY" | grep\
							'"selected"\s*:\s*true')
						if [ -z "$D_selected" ]; then continue; fi

						# Fetch events from the calendar
						if [ "$DBG" = 1 ]; then
							msg "Fetching events for $D_summary ..."
						fi
						Q=""
						Q=$Q"singleEvents=true"
						Q=$Q"&timeMin="$(date "+%FT%T%:z")
						Q=$Q"&timeMax="$(date -d"@$((NOW+604800))" "+%FT%T%:z")
						FEED="$(curl --silent\
							-H "Authorization: Bearer $ACCESS_TOKEN"\
							"$CALENDAR_GOOGLE_URL/calendars/$D_id/events?$Q")"
						FEED=$(extract_json_objects "$FEED"\
							"kind" "calendar#event" "start\|end")

						# Arrayize the events
						IFS=$'\n'
						EVENTS=($FEED)
						IFS=$OLDIFS

						# Iterate through events
						for j in `seq 0 $(( ${#EVENTS[@]} - 1 ))`; do
							# Dissect the event and skip if tentative
							ENTRY=${EVENTS[$j]}
							LEAD='^.*"status"'
							D_status=$(echo "$ENTRY" | grep '"status"'\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")
							LEAD='^.*"summary"'
							D_summary=$(echo "$ENTRY" | grep '"summary"'\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")
							LEAD='^.*"location"'
							D_location=$(echo "$ENTRY" | grep '"location"'\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")

							LEAD='^.*"start"[^|]*|[^|]*"date"'
							D_startDate=$(echo "$ENTRY" | grep "$LEAD"\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")

							LEAD='^.*"end"[^|]*|[^|]*"date"'
							D_endDate=$(echo "$ENTRY" | grep "$LEAD"\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")

							LEAD='^.*"start"[^|]*|[^|]*"dateTime"'
							D_start=$(echo "$ENTRY" | grep "$LEAD"\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")

							LEAD='^.*"end"[^|]*|[^|]*"dateTime"'
							D_end=$(echo "$ENTRY" | grep "$LEAD"\
								| sed "s/$LEAD\s*:\s*\"\([^\"]*\)\".*$/\1/")
							if [ -z "$D_end" ]; then
								if [ -n "$D_endDate" ] ; then
									D_end=$(date -d "$D_endDate" "+%s")
								elif [ -n "$D_start" ]; then
									D_end=$(( $(date -d "$D_start" "+%s")\
										+ 3600 ))
								elif [ -n "$D_startDate" ]; then
									D_end=$(( $(date -d "$D_start" "+%s")\
										+ (24*3600) ))
								fi
							else
								D_end=$(date -d "$D_end" "+%s")
							fi
							if [ -z "$D_start" ]; then
								if [ -n "$D_startDate" ] ; then
									D_start=$(date -d "$D_startDate" "+%s")
								else
									continue
								fi
							else
								D_start=$(date -d "$D_start" "+%s")
							fi
							if [ "$D_status" != "confirmed" ];then continue;fi

							# Add the calendar parts to the data string
							LIST=$LIST"\n"
							LIST=$LIST$D_start" "$D_end" {"
							LIST=$LIST$(echo -e "\u7")
							LIST=$LIST$D_backgroundColor$(echo -e "\u6")
							LIST=$LIST$D_foregroundColor$(echo -e "\u6")
							LIST=$LIST$D_summary$(echo -e "\u6")
							LIST=$LIST$D_location$(echo -e "\u6")
							LIST=$LIST$D_start$(echo -e "\u6")
							LIST=$LIST$D_end
						done
					done
				fi

				# Append the list of events to the data string
				NEW_DATA=$NEW_DATA$(echo -e "$LIST"\
					| sort -k1n,2n | uniq\
					| sed "s/^[0-9]\+ [0-9]\+ {//g" | tr -d "\n")

				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it (always true for events)
			SIZE_FRESH=0
			if [ "$SIZE_FRESH" = 0 ]; then
				# Collect date parts
				NOW=$(date '+%s')
				TODAY_YEAR=$(date '+%Y')
				TODAY_MONTH=$(( $(date '+%m' | sed 's/^0//') - 1 ))
				TODAY_DAY=$(date '+%e' | sed 's/^0//')
				TODAY_DOW=$(date '+%w')

				# Expand the data into an array
				OLDIFS=$IFS
				IFS=$(echo -e "\u7")
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done
				LINE=-1

				# Determine heading
				if [ "$CUR_ROWS" -lt 11 ]; then
					LINES_PER_EVENT=1
				elif [ "$CUR_ROWS" -lt 26 ]; then
					NEW_DRAW[((++LINE))]=" $COLOR_GRAY["$COLOR_ULINE"Calendar\
$COLOR_ULINE_OFF]$COLOR_NORM"
					LINES_PER_EVENT=2
				else
					NEW_DRAW[((++LINE))]=$COLOR_GRAY" Calendar "\
$DISPLAY_SEPARATOR_COLOR$DISPLAY_SEPARATOR_V$COLOR_RESET
					NEW_DRAW[((++LINE))]=$DISPLAY_SEPARATOR_COLOR\
$(repeat "$DISPLAY_SEPARATOR_H" 10)$DISPLAY_SEPARATOR_BR$COLOR_RESET
					LINES_PER_EVENT=3
				fi

				# First row is today's date
				DAY=$(date "+%e" | tr -d ' ')
				ORDINAL=${CALENDAR_ORDINALS[$(( (DAY/10==1) ? 0 : (DAY%10) ))]}
				NEW_DRAW[((++LINE))]=$(center\
					"$COLOR_PURP$(date "+%A, %B %e$ORDINAL %Y")$COLOR_RESET"\
					$CUR_COLS)

				# Space permitting, show a full calendar
				if [ "$(( CUR_ROWS-LINE ))" -gt 10 ]; then
					MONTH_DAY=$(( TODAY_DAY%7 - TODAY_DOW ))
					if [ "$MONTH_DAY" -gt 0 ]; then
						MONTH_DAY=$(( MONTH_DAY - 7 ))
					fi
					NEW_DRAW[((++LINE))]=$(center \
$COLOR_ULINE$COLOR_GRAY"Sun Mon Tue Wed Thu Fri Sat"$COLOR_RESET $CUR_COLS)
					DATE_ROW=""
					for i in `seq 0 41`; do
						DATE_ROW=$DATE_ROW" ";
						if [ "$MONTH_DAY" -gt 0 ]; then
							DATE_ROW=$DATE_ROW$(printf "%2s" "$MONTH_DAY")
						else
							DATE_ROW=$DATE_ROW"  "
						fi
						((++MONTH_DAY))
						if [ "${CALENDAR_MONTH_LENGTHS[$TODAY_MONTH]}" -lt\
								"$MONTH_DAY" ]; then
							NEW_DRAW[((++LINE))]=$(center "$(extend\
								"$DATE_ROW" 27)" $CUR_COLS)
							break;
						fi
						if [ "$MONTH_DAY" -eq "$TODAY_DAY" ]; then
							if [ $(( i%7 )) -eq 6 ]; then
								NEW_DRAW[((++LINE))]=$(center\
								"$DATE_ROW" $CUR_COLS)
								DATE_ROW=""
							else
								DATE_ROW=$DATE_ROW" "
							fi
							DATE_ROW=$DATE_ROW"$COLOR_BG_PURP$COLOR_BLCK"
						else
							DATE_ROW=$DATE_ROW"$COLOR_BG_NORM$COLOR_NORM"
							if [ $(( i%7 )) -eq 6 ]; then
								NEW_DRAW[((++LINE))]=$(center\
								"$DATE_ROW" $CUR_COLS)
								DATE_ROW=""
							else
								DATE_ROW=$DATE_ROW" "
							fi
						fi
					done
					((++LINE))
					((++LINE))
				fi

				# Iterate through calendar events
				NEW_DRAW[((++LINE))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Upcoming Events"$COLOR_RESET" *" $CUR_COLS)
				for i in `seq 1 $(( ${#DATA_ARRAY[@]} - 1 ))`; do
					# Break when we run out of room
					if [ "$((CUR_ROWS - LINE - LINES_PER_EVENT))" -lt 4 ]; then
						break;
					fi
					EVENT=${DATA_ARRAY[$i]}

					# Skip finished events
					if [ -z "${PARTS[5]}" ]||[ "${PARTS[5]}" -ge "$NOW" ]; then
						# Get the event parts
						IFS=$(echo -e "\u6")
						PARTS=($EVENT)
						IFS=$OLDIFS

						#Get the event colors
						EVENT_BG=$(hex_to_ansi "${PARTS[0]}" 1)
						EVENT_FG=$(hex_to_ansi "${PARTS[1]}")
						EVENT_INV=$(hex_to_ansi "${PARTS[0]}")

						# Format the start and end times
						if [ -n "${PARTS[4]}" ]; then
							START_TEXT=$(future_date "${PARTS[4]}" 1)
							START_LEN=$(echo -en "$START_TEXT"\
								| sed "s/[^m]*m//g" | wc -m)
						else
							START_TEXT=""
							START_LEN=0
						fi
						if [ -n "${PARTS[5]}" ]; then
							END_TEXT=$(future_date "${PARTS[5]}" 1)
							END_LEN=$(echo -en "$END_TEXT"\
								| sed "s/[^m]*m//g" | wc -m)
						else
							END_TEXT=""
							END_LEN=0
						fi
						if [ "$START_TEXT" == "$END_TEXT" ]; then
							SPAN_TEXT=$START_TEXT
						else
							SPAN_TEXT=$START_TEXT" - "$END_TEXT
						fi
						SPAN_LEN=$(echo -en "$SPAN_TEXT"\
							| sed "s/[^m]*m//g" | wc -m)

						# Print the event at different sizes
						LEN=$(( CUR_COLS/2 ))
						LEN=$(( (LEN<SECTION_MIN_COLS)?SECTION_MIN_COLS:LEN ))
						if [ "$LINES_PER_EVENT" -eq 1 ]; then
							DESC=$(truncatex\
								"${PARTS[2]}" $((LEN - SPAN_LEN - 4)))
							DESC=$EVENT_BG$EVENT_FG\
$DISPLAY_SEPARATOR_V$EVENT_INV$COLOR_BG_NORM$DISPLAY_RIGHT_ARROW\
$COLOR_RESET" "$DESC" "$SPAN_TEXT
							NEW_DRAW[((++LINE))]=$(center "$DESC" $CUR_COLS)
						elif [ "$LINES_PER_EVENT" -eq 2 ]; then
							DESC=$(truncatex\
								"${PARTS[2]}" $((LEN - SPAN_LEN - 4)))
							DESC=$EVENT_BG$EVENT_FG\
$DISPLAY_SEPARATOR_V$EVENT_INV$COLOR_BG_NORM$DISPLAY_RIGHT_ARROW\
$COLOR_RESET" "$DESC" "$SPAN_TEXT
							if [ -n "${PARTS[3]}" ]; then
								LOC=$(truncatex "        $COLOR_GRAY[ \
${PARTS[3]} ]$COLOR_RESET" $LEN)
							else LOC=""; fi
							NEW_DRAW[((++LINE))]=$(center "$DESC" $CUR_COLS)
							NEW_DRAW[((++LINE))]=$(center "$LOC" $CUR_COLS)
						else
							DESC=$(truncatex\
								"${PARTS[2]}" $((LEN - SPAN_LEN - 4)))
							DESC=$EVENT_BG$EVENT_FG\
$DISPLAY_SEPARATOR_V$EVENT_INV$COLOR_BG_NORM$DISPLAY_RIGHT_ARROW\
$COLOR_RESET" "$DESC" "$SPAN_TEXT
							if [ -n "${PARTS[3]}" ]; then
								LOC=$COLOR_GRAY"   [ "$(truncate\
									"${PARTS[3]}" $((LEN - 7)))" ]"$COLOR_RESET
							else LOC=""; fi
							DIV=$COLOR_DGRY$(repeat\
								"$DISPLAY_SEPARATOR_H" $LEN)$COLOR_RESET
							NEW_DRAW[((++LINE))]=$(center "$DIV" $CUR_COLS)
							NEW_DRAW[((++LINE))]=$(center "$DESC" $CUR_COLS)
							NEW_DRAW[((++LINE))]=$(center "$LOC" $CUR_COLS)
						fi
					fi
				done

				# Rows (n-2)-(n-1) show an update timestamp
				NEW_DRAW[$(( CUR_ROWS-2 ))]=$(center\
					"["$COLOR_PURP"Date"$COLOR_RESET"]" $CUR_COLS)
				SRC_TEXT=""
				if [ "$CALENDAR_GOOGLE_CALENDARS" ]; then
					if [ -n "$SRC_TEXT" ]; then SRC_TEXT=$SRC_TEXT" "; fi
					SRC_TEXT=$COLOR_BLUE"G"$COLOR_RED"o"$COLOR_YELO"o"\
$COLOR_BLUE"g"$COLOR_GREN"l"$COLOR_RED"e"$COLOR_RESET
				fi
				if [ "$CALENDAR_ICAL_CALENDARS" ]; then
					if [ -n "$SRC_TEXT" ]; then SRC_TEXT=$SRC_TEXT" "; fi
					SRC_TEXT="i"$COLOR_RED"Cal"$COLOR_RESET
				fi
				if [ -z "$SRC_TEXT" ]; then SRC_TEXT="system calendar"; fi
				NEW_DRAW[$(( CUR_ROWS-1 ))]=$(center\
					"Updated: $(date -d "@$NEW_DATE" "+%I:%M%p") | "$SRC_TEXT\
					$CUR_COLS)
			fi
		fi

		# --- Email -----------------------------------------
		if [ "$CUR_SECT" == 'E' ]; then
			# If the data is old, download new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ]; then
				if [ "$EMAIL_SOURCE" == "Gmail" ]; then
					URL="https://mail.google.com/mail/feed/atom"
					FEED=$(curl -u "$EMAIL_USER:$EMAIL_PASS" --silent "$URL")
					MAILCOUNT=$(grep -oPm1 "(?<=<fullcount>)[^<]*"\
							<<< "$FEED")
					NEW_DATA=$MAILCOUNT
					OLDIFS=$IFS
					IFS=$'\n'
					FEED=($(grep -oPm1 "<entry>.*?</entry>" <<< "$FEED"))
					for i in `seq 0 $((MAILCOUNT - 1))`; do
						ENTRY=${FEED[$i]}
						D_senderName=$(grep -oPm1 "(?<=<name>)[^<]*"\
							<<< "$ENTRY" | head -n1)
						D_senderEmail=$(grep -oPm1 "(?<=<email>)[^<]*"\
							<<< "$ENTRY" | head -n1)
						D_subject=$(grep -oPm1 "(?<=<title>)[^<]*"\
							<<< "$ENTRY")
						D_date=$(date -d "$(grep -oPm1 "(?<=<modified>)[^<]*"\
							<<< "$ENTRY")" +%s)
						D_content=$(grep -oPm1 "(?<=<summary>)[^<]*"\
							<<< "$ENTRY")
						NEW_DATA=$NEW_DATA$(echo -e "\u7")
						NEW_DATA=$NEW_DATA$D_senderName$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_senderEmail$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_date$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_subject$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_content
					done
					IFS=$OLDIFS
					DATA=$NEW_DATA
				else
					DATA=$OLD_DATA
				fi
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done

				# Expand the data into an array
				OLDIFS=$IFS
				IFS=$(echo -e "\u7")
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Loop through each email message
				for i in `seq 0 ${DATA_ARRAY[0]}`; do
					# Get the email message pieces
					OLDIFS=$IFS
					IFS=$(echo -e "\u6")
					DATA_PIECES=(${DATA_ARRAY[$i]})
					IFS=$OLDIFS

					# Get the date
					if [ "$i" -gt 0 ]; then
						DATE_STRING=$(past_date "${DATA_PIECES[2]}" 1)
						DATE_LEN=$(echo -en "$DATE_STRING"\
							| sed "s/[^m]*m//g" | wc -m)
					fi

					# Smallest heights (3-10): just show most relevant info
					if [ "$CUR_ROWS" -lt 11 ]; then
						# Break after too many rows of messages
						if [ "$(( i*1 + 2))" -ge "$CUR_ROWS" ]; then
							break
						# For the heading
						elif [ "$i" == 0 ]; then
							# Row 0 shows the message count
							NEW_DRAW[0]=$(center "No New Messages" $CUR_COLS)
							if [ "${DATA_ARRAY[$i]}" -gt 1 ]; then
								NEW_DRAW[0]=$(center $COLOR_GREN\
"${DATA_ARRAY[$i]}$COLOR_NORM New Messages" $CUR_COLS)
							elif [ "${DATA_ARRAY[$i]}" == 1 ]; then
								NEW_DRAW[0]=$(center $COLOR_GREN\
"1$COLOR_NORM New Message" $CUR_COLS)
							fi
						# For each message
						else
							# Row 1... Shows sender name and subject
							LEN_SENDER=${#DATA_PIECES[0]}
							if [ "$LEN_SENDER" -gt 15 ]; then
								LEN_SENDER=$(( ( (35*CUR_COLS)/100 ) > 15 ?\
									( (35*CUR_COLS)/100 ) : 15 ))
							fi
							NEW_DRAW[$i]="$COLOR_BOLD$(truncate\
								"${DATA_PIECES[0]}"\
								"$LEN_SENDER"\
							)$COLOR_BOLD_OFF - $(extend\
								"$(truncate\
									"${DATA_PIECES[3]}"\
									"$((CUR_COLS-(LEN_SENDER+4+DATE_LEN)))"\
								)"\
								"$((CUR_COLS-(LEN_SENDER+4+DATE_LEN)))"\
							) $DATE_STRING"
						fi

					# Medium heights (11-25): add some formatting
					elif [ "$CUR_ROWS" -lt 26 ]; then
						# Break after too many rows of messages
						if [ "$(( i*3 + 4))" -ge "$CUR_ROWS" ]; then
							break
						# For the heading
						elif [ "$i" == 0 ]; then
							# Row 0 has a heading
							NEW_DRAW[0]=" $COLOR_GRAY["$COLOR_ULINE"Email\
$COLOR_ULINE_OFF]$COLOR_NORM"

							# Row 1 shows the message count
							NEW_DRAW[1]=$(center "No New Messages" $CUR_COLS)
							if [ "${DATA_ARRAY[$i]}" -gt 1 ]; then
								NEW_DRAW[1]=$(center $COLOR_GREN\
"${DATA_ARRAY[$i]}$COLOR_NORM New Messages" $CUR_COLS)
							elif [ "${DATA_ARRAY[$i]}" == 1 ]; then
								NEW_DRAW[1]=$(center $COLOR_GREN\
"1$COLOR_NORM New Message" $CUR_COLS)
							fi
						# For each message
						else
							# Row 2... shows the sender's name and date
							NEW_DRAW[$(( i*3 ))]=$COLOR_GRAY"From:\
$COLOR_NORM $COLOR_BOLD$(extend\
								"$(truncate\
									"${DATA_PIECES[0]}"\
									"$(( $CUR_COLS - ($DATE_LEN + 7) ))")"\
								"$(( $CUR_COLS - ($DATE_LEN + 7) ))"\
							)$COLOR_BOLD_OFF $DATE_STRING"

							# Row 3... shows the subject and message content
							LEN_SUBJECT=${#DATA_PIECES[3]}
							if [ "$LEN_SUBJECT" -gt "$((CUR_COLS - 6))" ]; then
								NEW_DRAW[$((i*3+1))]="$COLOR_ULINE$(truncate\
									"${DATA_PIECES[3]}"\
									$CUR_COLS\
								)$COLOR_ULINE_OFF"
							else
								NEW_DRAW[$((i*3+1))]="$COLOR_ULINE\
${DATA_PIECES[3]}$COLOR_ULINE_OFF - $(truncate\
									"${DATA_PIECES[4]}"\
									$(( CUR_COLS - (3+LEN_SUBJECT) ))
								)"
							fi
						fi

					# Largest heights (26+): the full Monty!
					else
						# Break after too many rows of messages
						if [ "$(( i*4 + 5))" -ge "$CUR_ROWS" ]; then
							break
						# For the heading
						elif [ "$i" == "0" ]; then
							# Rows 0-1 have a heading
							NEW_DRAW[0]=$COLOR_GRAY" Email "\
$DISPLAY_SEPARATOR_COLOR$DISPLAY_SEPARATOR_V$COLOR_RESET
							NEW_DRAW[1]=$DISPLAY_SEPARATOR_COLOR\
$(repeat "$DISPLAY_SEPARATOR_H" 7)$DISPLAY_SEPARATOR_BR$COLOR_RESET

							# Row 2 shows the message count
							NEW_DRAW[2]=$(center "No New Messages" $CUR_COLS)
							if [ "${DATA_ARRAY[$i]}" -gt 1 ]; then
								NEW_DRAW[2]=$(center $COLOR_GREN\
"${DATA_ARRAY[$i]}$COLOR_NORM New Messages" $CUR_COLS)
							elif [ "${DATA_ARRAY[$i]}" == 1 ]; then
								NEW_DRAW[2]=$(center $COLOR_GREN\
"1$COLOR_NORM New Message" $CUR_COLS)
							fi
						# For each message
						else
							# Row 3... shows the sender's info and date
							if [ "$(( ${#DATA_PIECES[0]} + $DATE_LEN + 8))"\
									-gt "$CUR_COLS" ]; then
								NEW_DRAW[$((i*4))]=$COLOR_GRAY"From:\
$COLOR_NORM $COLOR_BOLD$(truncate\
									"${DATA_PIECES[0]}"\
									"$(( $CUR_COLS - ($DATE_LEN + 7) ))"\
								)$COLOR_BOLD_OFF $DATE_STRING"
							elif [ "$(( ${#DATA_PIECES[0]}\
									+ ${#DATA_PIECES[1]} + $DATE_LEN + 10))"\
									-gt "$CUR_COLS" ]; then
								NEW_DRAW[$((i*4))]=$COLOR_GRAY"From:\
$COLOR_NORM $COLOR_BOLD${DATA_PIECES[0]}$COLOR_BOLD_OFF $(extend\
									"<$(truncate "${DATA_PIECES[1]}"\
										"$(( $CUR_COLS-($DATE_LEN\
											+${#DATA_PIECES[0]}+10) ))"\
									)>"\
									"$(( $CUR_COLS-($DATE_LEN\
										+${#DATA_PIECES[0]}+8) ))"\
								) $DATE_STRING"
							else
								NEW_DRAW[$((i*4))]=$COLOR_GRAY"From:\
$COLOR_NORM $COLOR_BOLD${DATA_PIECES[0]}$COLOR_BOLD_OFF $(extend\
									"<${DATA_PIECES[1]}>"\
									"$(( $CUR_COLS-($DATE_LEN\
										+${#DATA_PIECES[0]}+8) ))"\
								) $DATE_STRING"
							fi

							# Row 4... shows the subject
							NEW_DRAW[$((i*4+1))]=$COLOR_GRAY"Subject:\
$COLOR_NORM $COLOR_ULINE$(truncate\
								"${DATA_PIECES[3]}"\
								$(( $CUR_COLS-9 ))\
							)$COLOR_ULINE_OFF"

							# Row 5... shows the message content
							NEW_DRAW[$((i*4+2))]="$(truncate\
								"${DATA_PIECES[4]}"\
								"$CUR_COLS"\
							)"
						fi
					fi
				done

				# Print the update date at the bottom
				if [ "$CUR_ROWS" -gt 10 ]; then
					NEW_DRAW[$(( CUR_ROWS-2 ))]=$(center\
						"[$COLOR_BLUE$EMAIL_USER$COLOR_RESET]" $CUR_COLS)
				fi
				SOURCE_STRING="mail"
				if [ "$EMAIL_SOURCE" == "Gmail" ]; then
					SOURCE_STRING="$COLOR_BLUE""G$COLOR_RED""m$COLOR_YELO"\
"a$COLOR_BLUE""i$COLOR_GREN""l$COLOR_RESET"
				fi
				NEW_DRAW[$(( CUR_ROWS-1 ))]=$(center\
					"Updated: $(date -d "@$NEW_DATE" "+%I:%M%p") | \
$SOURCE_STRING" $CUR_COLS)
			fi
		fi

		# --- Matrix ----------------------------------------
		if [ "$CUR_SECT" == 'M' ]; then
			# If the data is old, fetch new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ]; then
				NEW_DATA="$(( CUR_COLS/MATRIX_CHAR_WIDTH ))"
				for i in `seq 1 $NEW_DATA`; do
					NEW_DATA=$NEW_DATA$(echo -e "\u7")
					COL_DATA=""
					COL_LEN=0;
					for j in `seq 1 $CUR_ROWS`; do
						TEXT_TYPE=$(( RANDOM % 100 ))
						# Empty strings
						if [ "$TEXT_TYPE" -lt 18 ]; then
							TEXT_TYPE=0;
							TEXT_LEN=$(( RANDOM % 15 + 7 ))
							COL_LEN=$(( COL_LEN + TEXT_LEN ))
							COL_DATA=$COL_DATA$TEXT_TYPE","$TEXT_LEN
						# Random character strings
						elif [ "$TEXT_TYPE" -lt 98 ]; then
							TEXT_TYPE=1;
							TEXT_LEN=$(( RANDOM % 20 + 17 ))
							COL_LEN=$(( COL_LEN + TEXT_LEN ))
							COL_DATA=$COL_DATA$TEXT_TYPE","$TEXT_LEN
						# Quote strings
						else
							TEXT_TYPE=2
							QUOTE_ID=$(( RANDOM % MATRIX_NUM_QUOTES + 1 ))
							TEXT_LEN=${#MATRIX_QUOTES[$(( QUOTE_ID-1 ))]}
							COL_LEN=$(( COL_LEN + TEXT_LEN ))
							COL_DATA=$COL_DATA$TEXT_TYPE","$QUOTE_ID
						fi
						if [ "$COL_LEN" -ge "$CUR_ROWS" ]; then
							break
						else
							COL_DATA=$COL_DATA$(echo -e "\u6")
						fi
					done
					NEW_DATA=$NEW_DATA$COL_LEN$(echo -e "\u6")$COL_DATA
				done
				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Expand the data into an array
				OLDIFS=$IFS
				IFS=$(echo -e "\u7")
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done

				# Iterate over matrix columns
				for i in `seq 1 ${DATA_ARRAY[0]}`; do
					# Expand the column into strings
					OLDIFS=$IFS
					IFS=$(echo -e "\u6")
					STRINGS=(${DATA_ARRAY[$i]})
					IFS=$OLDIFS

					# Choose an offset for drawing
					NUM_STRINGS=$(( ${#STRINGS[@]} - 1 ))
					COL_LEN=${STRINGS[0]}
					OVERFLOW=$(( COL_LEN - CUR_ROWS ))
					OFFSET=$(( (OVERFLOW>0) ? (RANDOM%OVERFLOW) : 0 ))

					# Iterate over strings, filling in drawing
					DRAW_ROW=$(( 0 - OFFSET ))
					for j in `seq 1 $NUM_STRINGS`; do
						ONE_STRING=${STRINGS[$j]}
						TEXT_TYPE=${ONE_STRING%,*}

						# Empty space strings
						if [ "$TEXT_TYPE" -eq 0 ]; then
							TEXT_LEN=${ONE_STRING#*,}
							for k in `seq 0 $(( TEXT_LEN - 1 ))`; do
								if [ "$DRAW_ROW" -lt "$CUR_ROWS" ]\
										&& [ "$DRAW_ROW" -ge 0 ]; then
									NEW_CHAR="  "
									if [ "$k" -eq "$(( TEXT_LEN-1 ))" ]; then
										NEW_CHAR=$COLOR_BOLD$COLOR_WHIT\
$NEW_CHAR$COLOR_BOLD_OFF$COLOR_GREN
									elif [ "$k" -eq "$(( TEXT_LEN-2 ))" ]; then
										NEW_CHAR=$COLOR_LGRN$NEW_CHAR\
$COLOR_GREN
									fi
									NEW_DRAW[$DRAW_ROW]=${NEW_DRAW[$DRAW_ROW]}\
$NEW_CHAR
								fi
								((++DRAW_ROW))
							done

						# Character strings
						elif [ "$TEXT_TYPE" -eq 1 ]; then
							TEXT_LEN=${ONE_STRING#*,}
							for k in `seq 0 $(( TEXT_LEN - 1 ))`; do
								if [ "$DRAW_ROW" -lt "$CUR_ROWS" ]\
										&& [ "$DRAW_ROW" -ge 0 ]; then
									NEW_CHAR=${MATRIX_CHARS[$(( RANDOM\
											% ${#MATRIX_CHARS[@]} ))]}
									if [ "$k" -eq "$(( TEXT_LEN-1 ))" ]; then
										NEW_CHAR=$COLOR_BOLD$COLOR_WHIT\
$NEW_CHAR$COLOR_BOLD_OFF$COLOR_GREN
									elif [ "$k" -eq "$(( TEXT_LEN-2 ))" ]; then
										NEW_CHAR=$COLOR_LGRN$NEW_CHAR\
$COLOR_GREN
									fi
									NEW_DRAW[$DRAW_ROW]=${NEW_DRAW[$DRAW_ROW]}\
$NEW_CHAR
								fi
								((++DRAW_ROW))
							done

						# Quote strings
						else
							TEXT=${MATRIX_QUOTES[${ONE_STRING#*,}]}
							TEXT_LEN=$(echo -en "$TEXT" | wc -m)
							for k in `seq 0 $(( TEXT_LEN - 1 ))`; do
								if [ "$DRAW_ROW" -lt "$CUR_ROWS" ]\
										&& [ "$DRAW_ROW" -ge 0 ]; then
									NEW_CHAR=${TEXT:$k:1}" "
									if [ "$k" -eq "$(( TEXT_LEN-1 ))" ]; then
										NEW_CHAR=$COLOR_BOLD$COLOR_WHIT\
$NEW_CHAR$COLOR_BOLD_OFF$COLOR_GREN
									elif [ "$k" -eq "$(( TEXT_LEN-2 ))" ]; then
										NEW_CHAR=$COLOR_LGRN$NEW_CHAR\
$COLOR_GREN
									fi
									NEW_DRAW[$DRAW_ROW]=${NEW_DRAW[$DRAW_ROW]}\
$NEW_CHAR
								fi
								((++DRAW_ROW))
							done
						fi
					done
				done

				# Add classic green color
				for i in `seq 0 $(( CUR_ROWS - 1 ))`;do
					NEW_DRAW[$i]=$COLOR_GREN${NEW_DRAW[$i]}$COLOR_RESET
				done

				# Rows (n-2)-(n-1) show an update timestamp
				NEW_DRAW[$(( CUR_ROWS-2 ))]=$(center\
					"["$COLOR_GREN$(whoami)$COLOR_RESET"]" $CUR_COLS)
				NEW_DRAW[$(( CUR_ROWS-1 ))]=$(center\
					"call trans opt: received. $(date "+%T")" $CUR_COLS)
			fi
		fi

		# --- News ------------------------------------------
		if [ "$CUR_SECT" == 'N' ]; then
			# If the data is old, fetch new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ]; then
				OLDIFS=$IFS
				IFS=";"
				SOURCE_ARRAY=($NEWS_SOURCES)
				IFS=$OLDIFS
				NEW_DATA=${#SOURCE_ARRAY[@]}
				for i in `seq 0 $(( ${#SOURCE_ARRAY[@]}-1 ))`; do
					FEED=`wget -q -O- --header='Accept: application/rss+xml'\
						"${SOURCE_ARRAY[$i]}"\
						| tr -d "\n\r\t"\
						| sed "s/[ ]\+/ /" | sed "s/<item>/\n<item>/g"`
					CHANNEL=$(grep "<channel[^>]*>" <<< "$FEED")
					D_channelTitle=$(grep -oPm1 "(?<=<title>)[^<]*"\
						<<< "$CHANNEL" | head -n 1)
					D_channelLink=$(grep -oPm1 "(?<=<link>)[^<]*"\
						<<< "$CHANNEL" | head -n 1)
					D_channelDate=$(grep -oPm1 "(?<=<lastBuildDate>)[^<]*"\
						<<< "$CHANNEL" | head -n 1)
					D_channelDate=$(date -d "${D_channelDate:-$D_channelDate}"\
						"+%s");
					OLDIFS=$IFS
					IFS=$'\n'
					FEED=($(grep "<item[^>]*>.*</item>" <<< "$FEED"))
					NEW_DATA=$NEW_DATA$(echo -e "\u5")$D_channelTitle
					NEW_DATA=$NEW_DATA$(echo -e "\u6")$D_channelLink
					NEW_DATA=$NEW_DATA$(echo -e "\u6")$D_channelDate
					NEW_DATA=$NEW_DATA$(echo -e "\u6")${#FEED[@]}
					for j in `seq 0 $(( ${#FEED[@]} - 1 ))`; do
						ENTRY=${FEED[$j]}
						D_title=$(grep -oPm1 "(?<=<title>)[^<]*"\
							<<< "$ENTRY")
						D_link=$(grep -oPm1 "(?<=<link>)[^<]*"\
							<<< "$ENTRY")
						D_description=$(grep -oPm1 "(?<=<description>)[^<]*"\
							<<< "$ENTRY")
						D_date=$(grep -oPm1 "(?<=[<:]date>)[^<]*"\
							<<< "$ENTRY")
						D_pubDate=$(grep -oPm1 "(?<=[<:]pubDate>)[^<]*"\
							<<< "$ENTRY")
						D_date=$(date -d "${D_date:-$D_pubDate}" "+%s");
						D_description=$(strip_html "$D_description")
						NEW_DATA=$NEW_DATA$(echo -e "\u7")
						NEW_DATA=$NEW_DATA$D_title$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_link$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_date$(echo -e "\u6")
						NEW_DATA=$NEW_DATA$D_description
					done
					IFS=$OLDIFS
				done
				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Expand the data into an array
				OLDIFS=$IFS
				IFS=$(echo -e "\u5")
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done
				LINE=-1

				# Determine headings and lines of content text
				if [ "$CUR_ROWS" -lt 11 ]; then
					LINES_OF_HEADER=0
					LINES_OF_TEXT=0
				elif [ "$CUR_ROWS" -lt 26 ]; then
					NEW_DRAW[((++LINE))]=" $COLOR_GRAY["$COLOR_ULINE"News\
$COLOR_ULINE_OFF]$COLOR_NORM"
					LINES_OF_HEADER=1
					LINES_OF_TEXT=1
				else
					NEW_DRAW[((++LINE))]=$COLOR_GRAY" News "\
$DISPLAY_SEPARATOR_COLOR$DISPLAY_SEPARATOR_V$COLOR_RESET
					NEW_DRAW[((++LINE))]=$DISPLAY_SEPARATOR_COLOR\
$(repeat "$DISPLAY_SEPARATOR_H" 6)$DISPLAY_SEPARATOR_BR$COLOR_RESET
					LINES_OF_TEXT=2
					LINES_OF_TEXT=3
				fi

				# Determine number of articles per source
				ARTICLE_SIZE=$(( ${DATA_ARRAY[0]} * (3+LINES_OF_TEXT) ))
				NUM_ARTICLES=$(( ( (CUR_ROWS+ARTICLE_SIZE)\
					- (LINES_OF_HEADER + 3 + ${DATA_ARRAY[0]}))\
					/ ARTICLE_SIZE ))

				# Iterate through sources
                FIRST_SOURCE=""
                FIRST_LINK=""
				for i in `seq 1 ${DATA_ARRAY[0]}`; do
					if [ "$LINE" -ge "$((CUR_ROWS-(LINES_OF_TEXT+5)))" ]; then
						break
					fi
					SOURCE_DATA=${DATA_ARRAY[$i]}
					OLDIFS=$IFS
					IFS=$(echo -e "\u7")
					ARTICLE_ARRAY=($SOURCE_DATA)
					IFS=$OLDIFS

					# Print the source meta-data
					OLDIFS=$IFS
					IFS=$(echo -e "\u6")
					SOURCE_META=(${ARTICLE_ARRAY[0]})
					IFS=$OLDIFS
					NEW_DRAW[((++LINE))]=$COLOR_ULINE$COLOR_ORNG$(truncate\
							"${SOURCE_META[0]}" "$(($CUR_COLS - 13))"\
						)$COLOR_ULINE_OFF$COLOR_ORNG" - "$(date -d\
							"@${SOURCE_META[2]}" "+%F"\
						)$COLOR_RESET
					if [ "$i" -eq "1" ]; then
						FIRST_SOURCE=${SOURCE_META[0]}
						FIRST_LINK=${SOURCE_META[1]}
					fi

					# Iterate through articles
					for j in `seq 1 ${SOURCE_META[3]}`; do
						if [ "$LINE" -ge "$(( CUR_ROWS-(LINES_OF_TEXT+4) ))" ]\
								|| [ "$j" -gt "$NUM_ARTICLES" ]; then
							break;
						fi
						ARTICLE_DATA=${ARTICLE_ARRAY[$j]}
						OLDIFS=$IFS
						IFS=$(echo -e "\u6")
						INFO_ARRAY=($ARTICLE_DATA)
						IFS=$OLDIFS

						# Get the date
						DATE_STRING=$(past_date "${INFO_ARRAY[2]}" 1)
						DATE_LEN=$(echo -en "$DATE_STRING"\
							| sed "s/[^m]*m//g" | wc -m)

						# Show the title and date
						NEW_DRAW[((++LINE))]=$COLOR_BOLD$(truncatex\
							"${INFO_ARRAY[0]}"\
							"$(( CUR_COLS - $DATE_LEN - 1 ))"\
						)$COLOR_BOLD_OFF" "$DATE_STRING

						# Show any content lines
						CONTENT=${INFO_ARRAY[3]}
						for k in `seq 0 $(( LINES_OF_TEXT - 1 ))`; do
							if [ "${#CONTENT}" -gt "$CUR_COLS" ]; then
								NEW_DRAW[((++LINE))]=$(echo\
									"${CONTENT:0:$CUR_COLS}"\
									| sed "s/^\(.*\)[ ][^ ]*$/\1/")
								CONTENT=${CONTENT:$(( ${#NEW_DRAW[$LINE]}+1 ))}
							else
								NEW_DRAW[((++LINE))]=${CONTENT:0:$CUR_COLS}
							fi
						done

						# Show the article link
						NEW_DRAW[((++LINE))]=$COLOR_BLUE$(truncate\
							"${INFO_ARRAY[1]}" $CUR_COLS)$COLOR_RESET

						# A blank line
						((++LINE))
					done
				done

				# Row N-2 shows the name of the news source
				NEW_DRAW[$((CUR_ROWS-2))]=$(center "$(truncate\
					"["$COLOR_ORNG$FIRST_SOURCE$COLOR_RESET"]" $CUR_COLS)"\
					$CUR_COLS)

				# Row N-1 shows the update timestamp
				NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
					"@$NEW_DATE" "+%I:%M%p") | "$FIRST_LINK $CUR_COLS)
			fi
		fi

		# --- System Stats ----------------------------------
		if [ "$CUR_SECT" == 'S' ]; then
			# If the data is old, fetch new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ]; then
				NEW_DATA=""

				# Get the hostname
				D_host=$(hostname)

				# Get OS info
				OS_INFO=$(lsb_release -a 2>&1)
				D_OS_id=$(grep -oPm1 "(?<=Distributor ID:).*"\
					<<< "$OS_INFO" | head -n1 | sed 's/\s*//g')
				D_OS_rel=$(grep -oPm1 "(?<=Release:).*"\
					<<< "$OS_INFO" | head -n1 | sed 's/\s*//g')
				D_OS_code=$(grep -oPm1 "(?<=Codename:).*"\
					<<< "$OS_INFO" | head -n1 | sed 's/\s*//g')
				if [ "$D_OS_id" == "Ubuntu" ]; then
					D_OS_verShort="$D_OS_id $D_OS_rel"
					D_OS_ver="$D_OS_id $(grep -oPm1 "(?<=VERSION=\")[^\"]*"\
						<<< "$(cat /etc/*-release)" | head -n1)"
				else
					D_OS_verShort="$D_OS_id $D_OS_rel"
					D_OS_ver="$D_OS_id$D_OS_rel, $D_OS_code"
				fi

				# Get system operation info
				TOP=$(top bsn1 | head -n2 | sed 's/[ \t]\+/\t/g')
				COM_FEED=$(echo "$TOP" | head -n1)
				D_COM_users=$(echo "$COM_FEED"\
					| grep -Po '\b[0-9]+(?=\tuser)')
				D_COM_upDays=$(echo "$COM_FEED"\
					| grep -Po '\b[0-9]+(?=\tday)')
				D_COM_upHours=$(echo "$COM_FEED"\
					| grep -Po '\b[0-9]+(?=\thour)')
				D_COM_upMins=$(echo "$COM_FEED"\
					| grep -Po '\b[0-9]+(?=\tmin)')
				if [ -z "$D_COM_upHours" ] && [ -z "$D_COM_upMins" ]; then
					D_COM_upHours=$(echo "$COM_FEED"\
						| cut '-f5,6,7,8,9'\
						| grep -Po '[0-9]{1,2}(?=:[0-9]{2})')
					D_COM_upMins=$(echo "$COM_FEED"\
						| cut '-f5,6,7,8,9'\
						| grep -Po '(?<=[0-9]:)[0-9]{2}')
				fi

				# Get task info
				TSK_FEED=$(echo "$TOP" | tail -n1)
				D_TSK_tot=$(echo "$TSK_FEED" | cut -f2)
				D_TSK_run=$(echo "$TSK_FEED" | cut -f4)
				D_TSK_slp=$(echo "$TSK_FEED" | cut -f6)
				D_TSK_stp=$(echo "$TSK_FEED" | cut -f8)
				D_TSK_zmb=$(echo "$TSK_FEED" | cut -f10)

				# Get CPU usage info
				CPU_FEED=$(echo "$(mpstat -P ALL | grep -A16 '\ball\b'\
					| sed 's/[ \t]\+/\t/g')")
				D_CPU_count=$(echo "$CPU_FEED" | wc -l)
				D_CPU_all="$D_CPU_count"
				OLDIFS=$IFS
				IFS=$'\n'
				for oneCPU in $(echo "$CPU_FEED"); do
					D_CPU_id=$(echo "$oneCPU" | cut -f3)
					D_CPU_user=$(echo "$oneCPU" | cut -f4)
					D_CPU_kernel=$(echo "$oneCPU" | cut -f6)
					D_CPU_io=$(echo "$oneCPU" | cut -f7)
					D_CPU_interrupt=$(echo "$(echo "$oneCPU" | cut -f8)+\
$(echo "$oneCPU" | cut -f9)" | bc)
					D_CPU_idle=$(echo "$oneCPU" | cut -f13)
					D_CPU_all=$D_CPU_all$(echo -e "\u7")
					D_CPU_all=$D_CPU_all$D_CPU_id$(echo -e "\u6")
					D_CPU_all=$D_CPU_all$D_CPU_user$(echo -e "\u6")
					D_CPU_all=$D_CPU_all$D_CPU_kernel$(echo -e "\u6")
					D_CPU_all=$D_CPU_all$D_CPU_io$(echo -e "\u6")
					D_CPU_all=$D_CPU_all$D_CPU_interrupt$(echo -e "\u6")
					D_CPU_all=$D_CPU_all$D_CPU_idle
				done
				IFS=$OLDIFS

				# Get memory usage info
				MEM_FEED=$(free -tb | grep Total | sed 's/[ \t]\+/\t/g')
				D_MEM_size=$(echo "$MEM_FEED" | cut -f2)
				D_MEM_used=$(echo "$MEM_FEED" | cut -f3)
				D_MEM_free=$(echo "$MEM_FEED" | cut -f4)

				# Get filesystem usage info
				FSY_FEED=$(sudo df -lBK --output=source,target,size,pcent\
					| grep '^/dev' | sed 's/[ \t]\+/\t/g')
				D_FSY_count=$(echo "$FSY_FEED" | wc -l)
				D_FSY_all="$D_FSY_count"
				OLDIFS=$IFS
				IFS=$'\n'
				for oneFSY in $(echo "$FSY_FEED"); do
					D_FSY_mount=$(echo "$oneFSY" | cut -f2)
					D_FSY_size=$((\
						$(echo "$oneFSY" | tr -d 'K' | cut -f3)\
						* 1024\
					))
					D_FSY_used=$(echo "$oneFSY" | cut -f4 | tr -d "%"\
						| sed 's/^\(.*\)$/scale=4;\1\/100/' | bc)
					D_FSY_all=$D_FSY_all$(echo -e "\u7")
					D_FSY_all=$D_FSY_all$D_FSY_mount$(echo -e "\u6")
					D_FSY_all=$D_FSY_all$D_FSY_size$(echo -e "\u6")
					D_FSY_all=$D_FSY_all$D_FSY_used
				done
				IFS=$OLDIFS

				# Get temperature info
				TMP_FEED=$(sensors "-Au"\
					| grep '^[^:]\+$\|temp1_input:\|temp1_crit:'\
					| sed 's/^\s\+//' | sed 's/[ \t]\+/\t/g')
				D_TMP_count=$(( $(echo "$TMP_FEED" | wc -l) / 3 ))
				D_TMP_all="$D_TMP_count"
				D_TMP_sensor=""
				D_TMP_curTemp=""
				D_TMP_maxTemp=""
				OLDIFS=$IFS
				IFS=$'\n'
				for oneTMP in $(echo "$TMP_FEED"); do
					if [ ! -z "$(echo "$oneTMP" | grep 'temp1_input')" ]; then
						D_TMP_curTemp="$(echo "$oneTMP"\
							| sed 's/^.*[ \t]\+\([0-9]\+\.[0-9]\+\)$/\1/')"
					elif [ ! -z "$(echo "$oneTMP" | grep 'temp1_crit')" ]; then
						D_TMP_maxTemp="$(echo "$oneTMP"\
							| sed 's/^.*[ \t]\+\([0-9]\+\.[0-9]\+\)$/\1/')"
					else
						D_TMP_sensor=$oneTMP
					fi
					if [ ! -z "$D_TMP_sensor" ] && [ ! -z "$D_TMP_curTemp" ]\
							&& [ ! -z "$D_TMP_maxTemp" ]; then
						if [ "$STATS_TEMPERATURE_UNITS" == "F" ]; then
							D_TMP_curTemp=$(bc <<< "($D_TMP_curTemp*9+160)/5")
							D_TMP_maxTemp=$(bc <<< "($D_TMP_maxTemp*9+160)/5")
						fi
						D_TMP_all=$D_TMP_all$(echo -e "\u7")
						D_TMP_all=$D_TMP_all$D_TMP_sensor$(echo -e "\u6")
						D_TMP_all=$D_TMP_all$D_TMP_curTemp$(echo -e "\u6")
						D_TMP_all=$D_TMP_all$D_TMP_maxTemp
						D_TMP_sensor=""
						D_TMP_curTemp=""
						D_TMP_maxTemp=""
					fi
				done
				IFS=$OLDIFS

				# Get network info
				IP_URL='http://ipecho.net/plain'
				NWK_FEED=$(echo -e "Public\n"$(wget -qO- "$IP_URL");\
					ifconfig | grep '^[^ \t]\|inet addr:' |\
					sed 's/^.*inet addr:\([0-9\.]*\).*$/\1/' |\
					sed 's/^\([^ \t]\+\)[ \t].*$/\1/' |\
					sed 's/eth\([0-9]\+\)/Ethernet \1/' |\
					sed 's/^lo$/Loopback/'
				)
				D_NWK_count=$(( $(echo "$NWK_FEED" | wc -l) / 2 ))
				D_NWK_all="$D_NWK_count"
				POS=0
				OLDIFS=$IFS
				IFS=$'\n'
				for oneNWK in $NWK_FEED; do
					if [ "$POS" -eq 0 ]; then
						D_NWK_ipName=$oneNWK
						POS=1
					else
						D_NWK_ipAddress=$oneNWK
						D_NWK_all=$D_NWK_all$(echo -e "\u7")
						D_NWK_all=$D_NWK_all$D_NWK_ipName$(echo -e "\u6")
						D_NWK_all=$D_NWK_all$D_NWK_ipAddress
						POS=0
					fi
				done
				IFS=$OLDIFS

				# Fill out the data array
				NEW_DATA="$D_host;$D_OS_ver;$D_OS_verShort;$D_COM_upDays;\
$D_COM_upHours;$D_COM_upMins;$D_COM_users;$D_TSK_tot;$D_TSK_run;$D_TSK_slp;\
$D_TSK_stp;$D_TSK_zmb;$D_CPU_all;$D_MEM_size;$D_MEM_used;$D_MEM_free;\
$D_FSY_all;$D_TMP_all;$D_NWK_all"

				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Expand the data into an array
				OLDIFS=$IFS
				IFS=";"
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=" "; done
				VBAR="$COLOR_DGRY$DISPLAY_SEPARATOR_V$COLOR_RESET"
				f=-1

				# Assign the heading based on standard heights
				if [ "$CUR_ROWS" -lt 11 ]; then
					:
				elif [ "$CUR_ROWS" -lt 26 ]; then
					NEW_DRAW[((++f))]=" $COLOR_GRAY["$COLOR_ULINE"System Stats\
$COLOR_ULINE_OFF]$COLOR_NORM"
				else
					NEW_DRAW[((++f))]=$COLOR_GRAY" System Stats "\
$DISPLAY_SEPARATOR_COLOR$DISPLAY_SEPARATOR_V$COLOR_RESET
					NEW_DRAW[((++f))]=$DISPLAY_SEPARATOR_COLOR\
$(repeat "$DISPLAY_SEPARATOR_H" 14)$DISPLAY_SEPARATOR_BR$COLOR_RESET
				fi

				# Rows (f+1)-(g-1) show general information
				g=$f
				if [ "$g" -lt "$(( CUR_ROWS-5 ))" ]; then
					NEW_DRAW[((++g))]=$(center\
						"* "$COLOR_GRAY$COLOR_ULINE"General"$COLOR_RESET" *"\
						$CUR_COLS)
					NEW_DRAW[((++g))]=$COLOR_GRAY"OS Distro:"$COLOR_RESET" "\
$(truncate "${DATA_ARRAY[1]}" $(( CUR_COLS-11 )))
					if [ "$g" -lt "$(( CUR_ROWS-5 ))" ]; then
						POWER_TIME=$COLOR_GRAY"Power time:$COLOR_RESET"
						if [ -n "${DATA_ARRAY[3]}" ]; then
							POWER_TIME=$POWER_TIME" "${DATA_ARRAY[3]}" Days"
						else
							POWER_TIME=$POWER_TIME" 0 Days"
						fi
						if [ -n "${DATA_ARRAY[4]}" ]; then
							POWER_TIME=$POWER_TIME" "${DATA_ARRAY[4]}" Hrs"
						else
							POWER_TIME=$POWER_TIME" 0 Hrs"
						fi
						if [ -n "${DATA_ARRAY[5]}" ]; then
							POWER_TIME=$POWER_TIME" "${DATA_ARRAY[5]}" Mins"
						else
							POWER_TIME=$POWER_TIME" 0 Mins"
						fi
						NEW_DRAW[((++g))]=$POWER_TIME
						NEW_DRAW[((++g))]=$COLOR_GRAY"Users online:\
$COLOR_RESET ${DATA_ARRAY[6]}"
					fi
					((++g))
				fi

				# Rows (g+1)-(h-1) show task information
				h=$g
				if [ "$h" -lt "$(( CUR_ROWS-6 ))" ]; then
					NEW_DRAW[((++h))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Tasks"$COLOR_RESET" *" $CUR_COLS)
					NEW_DRAW[((++h))]=$COLOR_GRAY"Total:$COLOR_RESET $(extend\
						"${DATA_ARRAY[7]}" 5) ["
					BAR_WIDTH=$(( CUR_COLS-15 ))
					RUN_WIDTH=$(( DATA_ARRAY[8] / BAR_WIDTH +\
						(DATA_ARRAY[8]?1:0)))
					STP_WIDTH=$(( DATA_ARRAY[10] / BAR_WIDTH +\
						(DATA_ARRAY[10]?1:0)))
					ZMB_WIDTH=$(( DATA_ARRAY[11] / BAR_WIDTH +\
						(DATA_ARRAY[11]?1:0)))
					SLP_WIDTH=$(( BAR_WIDTH-(RUN_WIDTH+STP_WIDTH+ZMB_WIDTH) ))
					NEW_DRAW[$h]=${NEW_DRAW[$h]}$COLOR_GREN$(repeat "="\
						$RUN_WIDTH)
					NEW_DRAW[$h]=${NEW_DRAW[$h]}$COLOR_BLUE$(repeat "="\
						$SLP_WIDTH)
					NEW_DRAW[$h]=${NEW_DRAW[$h]}$COLOR_RED2$(repeat "="\
						$STP_WIDTH)
					NEW_DRAW[$h]=${NEW_DRAW[$h]}$COLOR_GRAY$(repeat "="\
						$ZMB_WIDTH)
					NEW_DRAW[$h]=${NEW_DRAW[$h]}"]"
					NEW_DRAW[((++h))]=""
					NEW_DRAW[$h]="${NEW_DRAW[$h]}$COLOR_BG_GREN \
$COLOR_BG_NORM$COLOR_GRAY""Run:$COLOR_NORM "$(( DATA_ARRAY[8] ))"  "
					NEW_DRAW[$h]="${NEW_DRAW[$h]}$COLOR_BG_BLUE \
$COLOR_BG_NORM$COLOR_GRAY""Slp:$COLOR_NORM "$(( DATA_ARRAY[9] ))"  "
					NEW_DRAW[$h]="${NEW_DRAW[$h]}$COLOR_BG_RED2 \
$COLOR_BG_NORM$COLOR_GRAY""Stp:$COLOR_NORM "$(( DATA_ARRAY[10] ))"  "
					NEW_DRAW[$h]="${NEW_DRAW[$h]}$COLOR_BG_GRAY \
$COLOR_BG_NORM$COLOR_GRAY""Zmb:$COLOR_NORM "$(( DATA_ARRAY[11] ))
					NEW_DRAW[$h]="$(center "${NEW_DRAW[$h]}" $CUR_COLS)"
					((++h))
				fi

				# Rows (h+1)-(i-1) show CPU info
				i=$h
				if [ "$i" -lt "$(( CUR_ROWS-9 ))" ]; then
					NEW_DRAW[((++i))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"CPU"$COLOR_RESET" *" $CUR_COLS)
					CELL_WIDTH=$(( (CUR_COLS-SECTION_MIN_COLS)/15 + 6 ))
					NEW_DRAW[((++i))]="$COLOR_DGRY$DISPLAY_SEPARATOR_TL"\
$(repeat "$DISPLAY_SEPARATOR_H" 3)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_TR\
$COLOR_RESET
					NEW_DRAW[$i]=$(center "${NEW_DRAW[$i]}" $CUR_COLS)
					NEW_DRAW[((++i))]=$VBAR$COLOR_GRAY"CPU"$COLOR_RESET$VBAR\
$(centerex $COLOR_GRAY"User"$COLOR_RESET $CELL_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"Kernel"$COLOR_RESET $CELL_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"I/O"$COLOR_RESET $CELL_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"Intrpt"$COLOR_RESET $CELL_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"Idle"$COLOR_RESET $CELL_WIDTH)$VBAR
					NEW_DRAW[$i]=$(center "${NEW_DRAW[$i]}" $CUR_COLS)
					NEW_DRAW[((++i))]="$COLOR_DGRY$DISPLAY_SEPARATOR_L"\
$(repeat "$DISPLAY_SEPARATOR_H" 3)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_R$COLOR_RESET
					NEW_DRAW[$i]=$(center "${NEW_DRAW[$i]}" $CUR_COLS)
					CPU_DATA=${DATA_ARRAY[12]}
					OLDIFS=$IFS
					IFS=$(echo -e "\u7")
					CPU_DATA=($CPU_DATA)
					IFS=$OLDIFS
					for j in `seq 1 ${CPU_DATA[0]}`; do
						oneCPU=${CPU_DATA[$j]}
						OLDIFS=$IFS
						IFS=$(echo -e "\u6")
						PARTS=($oneCPU)
						IFS=$OLDIFS
						NEW_DRAW[((++i))]=$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex\
							"${PARTS[0]}" 3)$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex "$(heat\
							"${PARTS[1]}%" "0.00" "5")" $CELL_WIDTH)$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex "$(heat\
							"${PARTS[2]}%" "0.00" "5")" $CELL_WIDTH)$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex "$(heat\
							"${PARTS[3]}%" "0.00" "5")" $CELL_WIDTH)$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex "$(heat\
							"${PARTS[4]}%" "0.00" "5")" $CELL_WIDTH)$VBAR
						NEW_DRAW[$i]=${NEW_DRAW[$i]}$(centerex "$(heat\
							"${PARTS[5]}%" "100.00" "75")" $CELL_WIDTH)$VBAR
						NEW_DRAW[$i]=$(center "${NEW_DRAW[$i]}" $CUR_COLS)
						if [ "$i" -eq "$((CUR_ROWS-12))" ]; then break; fi
					done
					NEW_DRAW[((++i))]="$COLOR_DGRY$DISPLAY_SEPARATOR_BL"\
$(repeat "$DISPLAY_SEPARATOR_H" 3)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $CELL_WIDTH)$DISPLAY_SEPARATOR_BR\
$COLOR_RESET
					NEW_DRAW[$i]=$(center "${NEW_DRAW[$i]}" $CUR_COLS)
					((++i))
				fi

				# Rows (i+1)-(j-1) show memory usage
				j=$i
				if [ "$j" -lt "$(( CUR_ROWS-6 ))" ]; then
					NEW_DRAW[((++j))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Mem Use"$COLOR_RESET" *" $CUR_COLS)
					NEW_DRAW[((++j))]=$(center $COLOR_GRAY"Total:"$COLOR_RESET\
" $(fmt_mem "${DATA_ARRAY[13]}" 1)   "$COLOR_GRAY"Used:"$COLOR_RESET\
" $(fmt_mem "${DATA_ARRAY[14]}" 1)" $CUR_COLS)
					NEW_DRAW[((++j))]=$(percent_bar\
						$(echo "${DATA_ARRAY[14]}/${DATA_ARRAY[13]}" | bc -l)\
						$(( CUR_COLS/2 )) $COLOR_PURP $COLOR_BG_PURP)
					NEW_DRAW[$j]=$(center "${NEW_DRAW[$j]}" $CUR_COLS)
					((++j))
				fi

				# Rows (j+1)-(k-1) show filesystem usage
				k=$j
				if [ "$k" -lt "$(( CUR_ROWS-9 ))" ]; then
					NEW_DRAW[((++k))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Filesystems"$COLOR_RESET" *" $CUR_COLS)
					MOUNT_WIDTH=$(( (CUR_COLS-SECTION_MIN_COLS)/12 + 18 ))
					SIZE_WIDTH=$(( (CUR_COLS-SECTION_MIN_COLS)/18 + 8 ))
					BAR_WIDTH=$(( (CUR_COLS-SECTION_MIN_COLS)/9 + 10 ))
					NEW_DRAW[((++k))]="$COLOR_DGRY$DISPLAY_SEPARATOR_TL"\
$(repeat "$DISPLAY_SEPARATOR_H" $MOUNT_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $SIZE_WIDTH)$DISPLAY_SEPARATOR_T\
$(repeat "$DISPLAY_SEPARATOR_H" $BAR_WIDTH)$DISPLAY_SEPARATOR_TR$COLOR_RESET
					NEW_DRAW[$k]=$(center "${NEW_DRAW[$k]}" $CUR_COLS)
					NEW_DRAW[((++k))]=$VBAR\
$(extend $COLOR_GRAY" Mount"$COLOR_RESET $MOUNT_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"Capacity"$COLOR_RESET $SIZE_WIDTH)$VBAR\
$(centerex $COLOR_GRAY"Usage"$COLOR_RESET $BAR_WIDTH)$VBAR
					NEW_DRAW[$k]=$(center "${NEW_DRAW[$k]}" $CUR_COLS)
					NEW_DRAW[((++k))]="$COLOR_DGRY$DISPLAY_SEPARATOR_L"\
$(repeat "$DISPLAY_SEPARATOR_H" $MOUNT_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $SIZE_WIDTH)$DISPLAY_SEPARATOR_C\
$(repeat "$DISPLAY_SEPARATOR_H" $BAR_WIDTH)$DISPLAY_SEPARATOR_R$COLOR_RESET
					NEW_DRAW[$k]=$(center "${NEW_DRAW[$k]}" $CUR_COLS)
					FSY_DATA=${DATA_ARRAY[16]}
					OLDIFS=$IFS
					IFS=$(echo -e "\u7")
					FSY_DATA=($FSY_DATA)
					IFS=$OLDIFS
					for FSYno in `seq 1 ${FSY_DATA[0]}`; do
						oneFSY=${FSY_DATA[$FSYno]}
						OLDIFS=$IFS
						IFS=$(echo -e "\u6")
						PARTS=($oneFSY)
						IFS=$OLDIFS
						NEW_DRAW[((++k))]=$VBAR
						NEW_DRAW[$k]=${NEW_DRAW[$k]}$(truncate "$(extend\
							" ${PARTS[0]}" $MOUNT_WIDTH)" $MOUNT_WIDTH)$VBAR
						NEW_DRAW[$k]=${NEW_DRAW[$k]}$(centerex "$(extendl\
							"$(fmt_mem ${PARTS[1]} 1)" 8)" $SIZE_WIDTH)$VBAR
						NEW_DRAW[$k]=${NEW_DRAW[$k]}$(centerex\
							"$(percent_bar\
								"${PARTS[2]}" $BAR_WIDTH\
								$COLOR_ORNG $COLOR_BG_ORNG\
							)"\
							$BAR_WIDTH\
						)$VBAR
						NEW_DRAW[$k]=$(center "${NEW_DRAW[$k]}" $CUR_COLS)
						if [ "$k" -eq "$((CUR_ROWS-5))" ]; then break; fi
					done
					NEW_DRAW[((++k))]="$COLOR_DGRY$DISPLAY_SEPARATOR_BL"\
$(repeat "$DISPLAY_SEPARATOR_H" $MOUNT_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $SIZE_WIDTH)$DISPLAY_SEPARATOR_B\
$(repeat "$DISPLAY_SEPARATOR_H" $BAR_WIDTH)$DISPLAY_SEPARATOR_BR$COLOR_RESET
					NEW_DRAW[$k]=$(center "${NEW_DRAW[$k]}" $CUR_COLS)
					((++k))
				fi

				# Rows (k+1)-(l-1) show temperature info
				l=$k
				if [ "$l" -lt "$(( CUR_ROWS-5 ))" ]; then
					NEW_DRAW[((++l))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Temperature"$COLOR_RESET" *" $CUR_COLS)
					SEG_WIDTH=$(( (CUR_COLS-SECTION_MIN_COLS)*3/56 + 3 ))
					BAR_WIDTH=$(( SEG_WIDTH*7 ))
					if [ "$STATS_TEMPERATURE_UNITS" == "F" ]; then
						MIN_TEMP="32"
					else
						MIN_TEMP="0"
					fi
					COLORS=("$COLOR_HEAT_0" "$COLOR_HEAT_1" "$COLOR_HEAT_2"\
						"$COLOR_HEAT_3" "$COLOR_HEAT_4" "$COLOR_HEAT_5"\
						"$COLOR_HEAT_6")
					BGCOLORS=("$COLOR_BG_HEAT_0" "$COLOR_BG_HEAT_1"\
						"$COLOR_BG_HEAT_2" "$COLOR_BG_HEAT_3"\
						"$COLOR_BG_HEAT_4" "$COLOR_BG_HEAT_5"\
						"$COLOR_BG_HEAT_6")
					TMP_DATA=${DATA_ARRAY[17]}
					OLDIFS=$IFS
					IFS=$(echo -e "\u7")
					TMP_DATA=($TMP_DATA)
					IFS=$OLDIFS
					for TMPno in `seq 1 ${TMP_DATA[0]}`; do
						oneTMP=${TMP_DATA[$TMPno]}
						OLDIFS=$IFS
						IFS=$(echo -e "\u6")
						PARTS=($oneTMP)
						IFS=$OLDIFS
						((++l))
						NEW_DRAW[$l]=$(truncate "${PARTS[0]}"\
							$(( CUR_COLS-(SEG_WIDTH*7+10) )))" "\
$(printf "%2d" "$MIN_TEMP")$STATS_DEGREE_SYMBOL$STATS_TEMPERATURE_UNITS
						for POS in `seq 0 $(( BAR_WIDTH-1 ))`; do
							if [ "$POS" -eq "$(( BAR_WIDTH *\
									(PARTS[1]-MIN_TEMP) / (PARTS[2]-MIN_TEMP)\
									))" ]; then
								NEW_DRAW[$l]=${NEW_DRAW[$l]}${BGCOLORS[$((\
									POS*7/BAR_WIDTH ))]}" "$COLOR_BG_NORM
							else
								NEW_DRAW[$l]=${NEW_DRAW[$l]}${COLORS[$((\
									POS*7/BAR_WIDTH ))]}"-"$COLOR_NORM
							fi
						done
						NEW_DRAW[$l]=${NEW_DRAW[$l]}\
$(printf "%3d" "${PARTS[2]}")$STATS_DEGREE_SYMBOL$STATS_TEMPERATURE_UNITS
						NEW_DRAW[$l]=$(center "${NEW_DRAW[$l]}" $CUR_COLS)
						if [ "$l" -eq "$(( CUR_ROWS-4))" ]; then break; fi
					done
					((++l))
				fi

				# Rows (l+1)-(m-1) show network info
				m=$l
				if [ "$m" -lt "$(( CUR_ROWS-5 ))" ]; then
					NEW_DRAW[((++m))]=$(center "* "$COLOR_GRAY$COLOR_ULINE\
"Network Addresses"$COLOR_RESET" *" $CUR_COLS)
					OLDIFS=$IFS
					IFS=$(echo -e "\u7")
					NWK_DATA=(${DATA_ARRAY[18]})
					IFS=$OLDIFS
					for NWKno in `seq 1 ${NWK_DATA[0]}`; do
						oneNWK=${NWK_DATA[$NWKno]}
						OLDIFS=$IFS
						IFS=$(echo -e "\u6")
						PARTS=($oneNWK)
						IFS=$OLDIFS
						((++m))
						NEW_DRAW[$m]=$COLOR_GRAY$(extendl "$(truncate\
							"${PARTS[0]}" 15)" 15)":$COLOR_RESET "$(extend\
							"${PARTS[1]}" 15)
						NEW_DRAW[$m]=$(center "${NEW_DRAW[$m]}" $CUR_COLS)
						if [ "$m" -eq "$(( CUR_ROWS-4))" ]; then break; fi
					done
					((++m))
				fi

				# Rows (n-2)-(n-1) show an update timestamp
				NEW_DRAW[$(( CUR_ROWS-2 ))]=$(center\
					"[$COLOR_RED${DATA_ARRAY[0]}$COLOR_RESET]" $CUR_COLS)
				NEW_DRAW[$(( CUR_ROWS-1 ))]=$(center\
					"Updated: $(date -d "@$NEW_DATE" "+%I:%M%p") | Dash"\
					$CUR_COLS)
			fi
		fi

		# --- Weather ---------------------------------------
		if [ "$CUR_SECT" == 'W' ]; then
			# If the data is old, download new data, otherwise use the old data
			if [ "$DATA_FRESH" -eq 0 ]; then
				URL="http://www.weather.gov/xml/current_obs/"
				DOWNLOAD=$(wget -q -O- "$URL$WEATHER_NOAA_STATION_CODE"".xml")
				D_cred=$(grep -oPm1 "(?<=<credit_URL>)[^<]*"\
					<<< "$DOWNLOAD")
				D_loc=$(grep -oPm1 "(?<=<location>)[^<]*"\
					<<< "$DOWNLOAD")
				D_lat=$(grep -oPm1 "(?<=<latitude>)[^<]*"\
					<<< "$DOWNLOAD")
				D_lon=$(grep -oPm1 "(?<=<longitude>)[^<]*"\
					<<< "$DOWNLOAD")
				D_time=$(grep -oPm1 "(?<=<observation_time_rfc822>)[^<]*"\
					<<< "$DOWNLOAD")
				D_weather=$(grep -oPm1 "(?<=<weather>)[^<]*"\
					<<< "$DOWNLOAD")
				D_temp_f=$(grep -oPm1 "(?<=<temp_f>)[^<]*"\
					<<< "$DOWNLOAD"); D_temp_f=$(sed "s/\..//" <<< "$D_temp_f")
				D_temp_c=$(grep -oPm1 "(?<=<temp_c>)[^<]*"\
					<<< "$DOWNLOAD"); D_temp_c=$(sed "s/\..//" <<< "$D_temp_c")
				D_hu=$(grep -oPm1 "(?<=<relative_humidity>)[^<]*"\
					<<< "$DOWNLOAD")
				D_w_dir=$(grep -oPm1 "(?<=<wind_dir>)[^<]*"\
					<<< "$DOWNLOAD")
				D_w_mph=$(grep -oPm1 "(?<=<wind_mph>)[^<]*"\
					<<< "$DOWNLOAD")
				D_chil_f=$(grep -oPm1 "(?<=<windchill_f>)[^<]*"\
					<<< "$DOWNLOAD")
				D_chil_c=$(grep -oPm1 "(?<=<windchill_c>)[^<]*"\
					<<< "$DOWNLOAD")
				D_vis=$(grep -oPm1 "(?<=<visibility_mi>)[^<]*"\
					<<< "$DOWNLOAD")
				if [ -z "$D_chil_f" ]; then D_chil_f='-'; fi
				if [ -z "$D_chil_c" ]; then D_chil_c='-'; fi
				if [ -z "$D_w_dir" ]; then D_w_dir='-'; fi
				if [ -z "$D_w_mph" ]; then D_w_mph='-'; fi
				NEW_DATA="$D_weather;$D_temp_f;$D_temp_c;$D_chil_f;$D_chil_c;\
$D_hu;$D_time;$D_cred;$D_w_dir;$D_w_mph;$D_vis;$D_loc;$D_lat;$D_lon\n"
				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Expand the data into an array
				OLDIFS=$IFS
				IFS=";"
				DATA_ARRAY=($DATA)
				IFS=$OLDIFS

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=""; done

				# Smallest heights (3-10): just show most relevant info
				if [ "$CUR_ROWS" -lt 11 ]; then
					# Row 0 shows the weather status
					NEW_DRAW[0]=$(center "${DATA_ARRAY[0]}" $CUR_COLS)

					# Row 1 shows the temperature
					NEW_DRAW[1]=${DATA_ARRAY[$((1+WEATHER_TEMPERATURE_OFFSET\
						))]}$WEATHER_DEGREE_SYMBOL$WEATHER_TEMPERATURE_UNITS
					if [ "${DATA_ARRAY[$((3+WEATHER_TEMPERATURE_OFFSET))]}" \
						!= '-' ]; then
						NEW_DRAW[1]=${NEW_DRAW[1]}"  (feels like "\
${DATA_ARRAY[3]}$WEATHER_DEGREE_SYMBOL")"
					fi
					NEW_DRAW[1]=$(center "${NEW_DRAW[1]}" $CUR_COLS)

					# Row 2 shows the humidity
					NEW_DRAW[2]=$(center "Humidity: ${DATA_ARRAY[5]}%"\
						$CUR_COLS)

					# Row 3 shows the wind
					if [ "$CUR_ROWS" -gt 5 ]; then
						NEW_DRAW[3]=$(center "Wind: "${DATA_ARRAY[8]}\
" ${DATA_ARRAY[9]}mph" $CUR_COLS)
					fi

					# Row 4 shows visibility
					if [ "$CUR_ROWS" -gt 6 ]; then
						NEW_DRAW[4]=$(center "Visibility: ${DATA_ARRAY[10]}mi"\
							$CUR_COLS)
					fi

					# Row N-1 shows the update timestamp
					if [ "$CUR_ROWS" -gt 3 ]; then
						NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
							"${DATA_ARRAY[6]}" "+%I:%M%p") | ${DATA_ARRAY[7]}"\
							$CUR_COLS)
					fi

				# Medium heights (11-25): add some formatting
				elif [ "$CUR_ROWS" -lt 26 ]; then
					# Row 0 has a heading
					NEW_DRAW[0]=" $COLOR_GRAY["$COLOR_ULINE"Weather\
$COLOR_ULINE_OFF]$COLOR_NORM"

					# Rows 1-3 are the weather status and its border
					DECORATION_STRING=${WEATHER_DECORATIONS[${DATA_ARRAY[0]}]}
					DECORATION_COLOR=${WEATHER_COLORS[${DATA_ARRAY[0]}]}
					if [ -z "$DECORATION_STRING" ]; then
						DECORATION_STRING="?$DISPLAY_ESCAPE_SPACE"
					fi
					if [ -z "$DECORATION_COLOR" ]; then
						DECORATION_COLOR="$COLOR_NORM"
					fi
					NEW_DRAW[1]=$DECORATION_COLOR$(center $(randomize\
						$DECORATION_STRING $(( ${#DATA_ARRAY[0]}+4 )))\
						$CUR_COLS)$COLOR_NORM
					NEW_DRAW[3]=$DECORATION_COLOR$(center $(randomize\
						$DECORATION_STRING $(( ${#DATA_ARRAY[0]}+4 )))\
						$CUR_COLS)$COLOR_NORM
					NEW_DRAW[1]=${NEW_DRAW[1]//$DISPLAY_ESCAPE_SPACE/ }
					NEW_DRAW[3]=${NEW_DRAW[3]//$DISPLAY_ESCAPE_SPACE/ }
					NEW_DRAW[2]=$DECORATION_COLOR$(center\
						"${DECORATION_STRING:0:1} ${DATA_ARRAY[0]} \
${DECORATION_STRING:0:1}" $CUR_COLS)$COLOR_NORM

					# Row 4 is blank

					# Row 5 shows the temperature
					NEW_DRAW[5]=${DATA_ARRAY[$((1+WEATHER_TEMPERATURE_OFFSET\
						))]}$WEATHER_DEGREE_SYMBOL$WEATHER_TEMPERATURE_UNITS
					if [ "${DATA_ARRAY[$((3+WEATHER_TEMPERATURE_OFFSET))]}" \
						!= '-' ]; then
						NEW_DRAW[5]=${NEW_DRAW[5]}"  (feels like "\
${DATA_ARRAY[3]}$WEATHER_DEGREE_SYMBOL")"
					fi
					NEW_DRAW[5]=$(center "${NEW_DRAW[5]}" $CUR_COLS)

					# Row 6 shows the humidity
					NEW_DRAW[6]=$(center "Humidity: ${DATA_ARRAY[5]}%"\
						$CUR_COLS)

					# Row 7 shows the wind
					if [ "$CUR_ROWS" -gt 9 ]; then
						if [ "${DATA_ARRAY[8]}" != '-' ]; then
							if [ "${DATA_ARRAY[9]}" != '-' ]; then
								NEW_DRAW[7]="Wind: ${DATA_ARRAY[8]} "\
${DATA_ARRAY[9]}"mph"
							else
								NEW_DRAW[7]="Wind: ${DATA_ARRAY[8]}"
							fi
						else
							if [ "${DATA_ARRAY[9]}" != '-' ]; then
								NEW_DRAW[7]="Wind: ${DATA_ARRAY[9]}mph"
							else
								NEW_DRAW[7]="Wind: - unavailable -"
							fi
						fi
						NEW_DRAW[7]=$(center "${NEW_DRAW[7]}" $CUR_COLS)
					fi

					# Row 8 shows visibility
					if [ "$CUR_ROWS" -gt 10 ]; then
						NEW_DRAW[8]=$(center "Visibility: ${DATA_ARRAY[10]}mi"\
							$CUR_COLS)
					fi

					# Row N-2 shows the name of the observatory
					if [ "$CUR_ROWS" -gt 11 ]; then
						NEW_DRAW[$((CUR_ROWS-2))]=$(center "$(truncate\
							"[$COLOR_YELO${DATA_ARRAY[11]}$COLOR_RESET]"\
							$CUR_COLS)" $CUR_COLS)
					fi

					# Row N-1 shows the update timestamp
					if [ "$CUR_ROWS" -gt 7 ]; then
						NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
							"${DATA_ARRAY[6]}" "+%I:%M%p") | ${DATA_ARRAY[7]}"\
							$CUR_COLS)
					fi

				# Largest heights (26+): the full Monty!
				else
					# Rows 0-1 have a heading
					NEW_DRAW[0]=$COLOR_GRAY" Weather "\
$DISPLAY_SEPARATOR_COLOR$DISPLAY_SEPARATOR_V$COLOR_RESET
					NEW_DRAW[1]=$DISPLAY_SEPARATOR_COLOR\
$(repeat "$DISPLAY_SEPARATOR_H" 9)$DISPLAY_SEPARATOR_BR$COLOR_RESET

					# Row 2 shows the weather status and
					# Rows 3-9 show a large-size decorated temperature read-out
					DECORATION_STRING=${WEATHER_DECORATIONS[${DATA_ARRAY[0]}]}
					DECORATION_COLOR=${WEATHER_COLORS[${DATA_ARRAY[0]}]}
					DECORATION_COLOR_BG=${WEATHER_BG_COLORS[${DATA_ARRAY[0]}]}
					if [ -z "$DECORATION_STRING" ]; then
						DECORATION_STRING="?$DISPLAY_ESCAPE_SPACE"
					fi
					if [ -z "$DECORATION_COLOR" ]; then
						DECORATION_COLOR="$COLOR_NORM"
					fi
					if [ -z "$DECORATION_COLOR_BG" ]; then
						DECORATION_COLOR_BG="$COLOR_BG_NORM"
					fi
					LARGE_3=""
					LARGE_4=""
					LARGE_5=""
					LARGE_6=""
					LARGE_7=""
					LARGE_8=""
					LARGE_9=""
					TEMP=${DATA_ARRAY[$((1 + WEATHER_TEMPERATURE_OFFSET\
						))]}$WEATHER_DEGREE_SYMBOL$WEATHER_TEMPERATURE_UNITS
					for (( i=0; i<${#TEMP}; i++ )); do
						CHAR=${TEMP:$i:1}
						LARGE_3=$LARGE_3$(randomize $DECORATION_STRING 6)
						LARGE_4=$LARGE_4" "${LARGE_READ_OUT["$CHAR",0]}
						LARGE_5=$LARGE_5" "${LARGE_READ_OUT["$CHAR",1]}
						LARGE_6=$LARGE_6" "${LARGE_READ_OUT["$CHAR",2]}
						LARGE_7=$LARGE_7" "${LARGE_READ_OUT["$CHAR",3]}
						LARGE_8=$LARGE_8" "${LARGE_READ_OUT["$CHAR",4]}
						LARGE_9=$LARGE_9$(randomize $DECORATION_STRING 6)
					done
					LARGE_3=$(center $(randomize $DECORATION_STRING 2)\
$LARGE_3$(randomize $DECORATION_STRING 2) $CUR_COLS)
					LARGE_4=$(center "$(randomize $DECORATION_STRING \
1) $LARGE_4 $(randomize $DECORATION_STRING 1)" $CUR_COLS)
					LARGE_5=$(center "$(randomize $DECORATION_STRING \
1) $LARGE_5 $(randomize $DECORATION_STRING 1)" $CUR_COLS)
					LARGE_6=$(center "$(randomize $DECORATION_STRING \
1) $LARGE_6 $(randomize $DECORATION_STRING 1)" $CUR_COLS)
					LARGE_7=$(center "$(randomize $DECORATION_STRING \
1) $LARGE_7 $(randomize $DECORATION_STRING 1)" $CUR_COLS)
					LARGE_8=$(center "$(randomize $DECORATION_STRING \
1) $LARGE_8 $(randomize $DECORATION_STRING 1)" $CUR_COLS)
					LARGE_9=$(center $(randomize $DECORATION_STRING 2)\
$LARGE_9$(randomize $DECORATION_STRING 2) $CUR_COLS)
					LARGE_3=${LARGE_3//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_4=${LARGE_4//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_5=${LARGE_5//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_6=${LARGE_6//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_7=${LARGE_7//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_8=${LARGE_8//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_9=${LARGE_9//"$DISPLAY_ESCAPE_SPACE"/ }
					LARGE_4=${LARGE_4//"X"/$DECORATION_COLOR_BG $COLOR_BG_NORM}
					LARGE_5=${LARGE_5//"X"/$DECORATION_COLOR_BG $COLOR_BG_NORM}
					LARGE_6=${LARGE_6//"X"/$DECORATION_COLOR_BG $COLOR_BG_NORM}
					LARGE_7=${LARGE_7//"X"/$DECORATION_COLOR_BG $COLOR_BG_NORM}
					LARGE_8=${LARGE_8//"X"/$DECORATION_COLOR_BG $COLOR_BG_NORM}
					NEW_DRAW[2]=$DECORATION_COLOR$(center "${DATA_ARRAY[0]}"\
						$CUR_COLS)$COLOR_NORM
					NEW_DRAW[3]=$DECORATION_COLOR$LARGE_3$COLOR_NORM
					NEW_DRAW[4]=$DECORATION_COLOR$LARGE_4$COLOR_NORM
					NEW_DRAW[5]=$DECORATION_COLOR$LARGE_5$COLOR_NORM
					NEW_DRAW[6]=$DECORATION_COLOR$LARGE_6$COLOR_NORM
					NEW_DRAW[7]=$DECORATION_COLOR$LARGE_7$COLOR_NORM
					NEW_DRAW[8]=$DECORATION_COLOR$LARGE_8$COLOR_NORM
					NEW_DRAW[9]=$DECORATION_COLOR$LARGE_9$COLOR_NORM

					# Row 10 shows the effective temperature
					if [ "${DATA_ARRAY[$((3+WEATHER_TEMPERATURE_OFFSET))]}" \
						!= '-' ]; then
						NEW_DRAW[10]=$(center\
						"(feels like ${DATA_ARRAY[3]}$WEATHER_DEGREE_SYMBOL)"\
						$CUR_COLS)
					else
						NEW_DRAW[10]=""
					fi

					# Row 11 is blank

					# Row 12 shows the humidity
					NEW_DRAW[12]=$(center "Humidity: ${DATA_ARRAY[5]}%"\
						$CUR_COLS)

					# Row 13 shows the wind
					if [ "${DATA_ARRAY[8]}" != '-' ]; then
						if [ "${DATA_ARRAY[9]}" != '-' ]; then
							NEW_DRAW[13]="Wind: ${DATA_ARRAY[8]} "\
${DATA_ARRAY[9]}"mph"
						else
							NEW_DRAW[13]="Wind: ${DATA_ARRAY[8]}"
						fi
					else
						if [ "${DATA_ARRAY[9]}" != '-' ]; then
							NEW_DRAW[13]="Wind: ${DATA_ARRAY[9]}mph"
						else
							NEW_DRAW[13]="Wind: - unavailable -"
						fi
					fi
					NEW_DRAW[13]=$(center "${NEW_DRAW[13]}" $CUR_COLS)

					# Row 14 shows visibility
					NEW_DRAW[14]=$(center "Visibility: ${DATA_ARRAY[10]}mi"\
						$CUR_COLS)

					# Rows 15 and 16 are blank

					# Rows 17-(N-3) have a weather graphic
					if [ "$CUR_ROWS" -gt "20" ]; then
						for i in `seq 17 $((CUR_ROWS-4))`; do
							LINE_ESCAPED=$(center "$(randomize "\
$DECORATION_STRING$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE" $((CUR_COLS/2)))" $CUR_COLS)
							NEW_DRAW[$i]=$DECORATION_COLOR\
${LINE_ESCAPED//"$DISPLAY_ESCAPE_SPACE"/ }$COLOR_NORM
						done
					fi

					# Row N-2 shows the name of the observatory
					NEW_DRAW[$((CUR_ROWS-2))]=$(center "$(truncate\
						"[$COLOR_YELO${DATA_ARRAY[11]}$COLOR_RESET]"\
						$CUR_COLS)" $CUR_COLS)

					# Row N-1 shows the update timestamp
					NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
						"${DATA_ARRAY[6]}" "+%I:%M%p") | ${DATA_ARRAY[7]}"\
						$CUR_COLS)
				fi
			fi
		fi

		# Get the correct data and date
		if [ "$DATA_FRESH" -eq 0 ]; then
			if [ "$DBG" = 1 ]; then msg "New Data"; fi
			DATA=$NEW_DATA
			DATE=$NEW_DATE
		else
			if [ "$DBG" = 1 ]; then msg "Old Data"; fi
			DATA=$OLD_DATA
			DATE=$OLD_DATE
		fi

		# Get the correct size and drawing
		if [ "$SIZE_FRESH" = 0 ]; then
			if [ "$DBG" = 1 ]; then msg "New Drawing"; fi
			SIZE=$NEW_SIZE
			DRAW=("${NEW_DRAW[@]}")
		else
			if [ "$DBG" = 1 ]; then msg "Old Drawing"; fi
			SIZE=$OLD_SIZE
			DRAW=("${OLD_DRAW[@]}")
		fi

		# If anything has changed, write to the dash file and print it
		if [ "$((DATA_FRESH+SIZE_FRESH+STARTED))" -lt 3 ]; then
			# Print data to file
			echo "$DATE" > "$DASH_ROOT/$CUR_SECT"".dash"
			echo "$DATA" >> "$DASH_ROOT/$CUR_SECT"".dash"
			echo "$SIZE" >> "$DASH_ROOT/$CUR_SECT"".dash"
			printf '%s\n' "${DRAW[@]}"  >> "$DASH_ROOT/$CUR_SECT"".dash"
			chmod 700 "$DASH_ROOT/$CUR_SECT"".dash"

			# In debug mode, skip output
			if [ "$DBG" = 0 ]; then
				# Print top border as needed
				if [ "$BORDER_TOP" = 1 ]; then
					tput cup $ROWS_PROCESSED $COLS_PROCESSED
					if [ "$CUR_X" -gt 0 ]; then
						if [[ "$PREV_SECT" != "_" ]]; then
							echo -n $DISPLAY_SEPARATOR_COLOR\
$DISPLAY_SEPARATOR_C$COLOR_RESET;
						else
							echo -n $DISPLAY_SEPARATOR_COLOR\
$DISPLAY_SEPARATOR_CB$COLOR_RESET;
						fi
					fi
					if [ "$DISPLAY_SEPARATOR_H" == "-" ]; then
						echo "$(head -c "$CUR_COLS" < "/dev/zero"|tr '\0' '-')"
					else
						printf "$DISPLAY_SEPARATOR_COLOR\
$DISPLAY_SEPARATOR_H$COLOR_RESET%.0s" $(seq 1 $CUR_COLS)
					fi
				fi

				# Print left border and content
				for i in `seq 0 $((CUR_ROWS-1))`; do
					# Clear the row first
					tput cup $((ROWS_PROCESSED+BORDER_TOP+i))\
						$((COLS_PROCESSED+BORDER_LEFT))
					printf "%*s" $CUR_COLS " "
					# Reset the cursor and print content
					tput cup $((ROWS_PROCESSED+BORDER_TOP+i)) $COLS_PROCESSED
					if [ "$BORDER_LEFT" = 1 ]; then
						if [[ "$PREV_SECT" != "_" ]]; then
							echo -n $DISPLAY_SEPARATOR_COLOR\
$DISPLAY_SEPARATOR_V$COLOR_RESET;
						fi
					fi
					echo -n "${DRAW[$i]}"
				done
			fi
		fi

		# Done with one section drawing
		if [ "$CUR_X" -eq "$((SECTS_X-1))" ]; then
			COLS_PROCESSED=0
			ROWS_PROCESSED=$((ROWS_PROCESSED+CUR_ROWS+BORDER_TOP))
		else
			COLS_PROCESSED=$((COLS_PROCESSED+CUR_COLS+BORDER_LEFT))
		fi
		((++SECTS_PROCESSED))
		PREV_SECT=$CUR_SECT
	done

	# Wait until the next refresh
	STARTED=1
	TMP="nop"
	read -t $REFRESH_RATE_SECONDS TMP
	if [ "$TMP" == "r" ]; then STARTED=0; fi
}

# Loop the section processing code ad infinitum (exit with CTRL+c)
while true; do
	render_sections
done
