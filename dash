#!/bin/bash

# Dash basic configuration
[ -z "$DASH_ROOT" ] && DASH_ROOT="$( cd "$( dirname "$0" )" && pwd )"
if [ -f "$DASH_ROOT/dash.ini" ]; then
	function load_config(){
		RET="$(awk -F "\\\\s*=\\\\s*" "/^$1/"' {print $2}'\
			"$DASH_ROOT/dash.ini")"
		[ -n "$RET" ] && echo $RET || echo $2
	}
else
	function load_config(){ echo $2; }
fi
DBG=$(load_config "DBG" '0')
REFRESH_RATE_SECONDS=$(load_config "REFRESH_RATE_SECONDS" '5')
DISPLAY_ENCODING=$(load_config "DISPLAY_ENCODING" 'ASCII')
DISPLAY_COLOR_PALETTE=$(load_config "DISPLAY_COLOR_PALETTE" '8')
DISPLAY_ESCAPE_SPACE=$(load_config "DISPLAY_ESCAPE_SPACE" '`')
if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
	DISPLAY_SEPARATOR_V=$(load_config "DISPLAY_SEPARATOR_V" '│')
	DISPLAY_SEPARATOR_H=$(load_config "DISPLAY_SEPARATOR_H" '─')
	DISPLAY_SEPARATOR_C=$(load_config "DISPLAY_SEPARATOR_C" '┼')
else
	DISPLAY_SEPARATOR_V=$(load_config "DISPLAY_SEPARATOR_V" '|')
	DISPLAY_SEPARATOR_H=$(load_config "DISPLAY_SEPARATOR_H" '-')
	DISPLAY_SEPARATOR_C=$(load_config "DISPLAY_SEPARATOR_C" '+')
fi
SECTION_MIN_COLS=$(load_config "SECTION_MIN_COLS" '40')
SECTION_MIN_ROWS=$(load_config "SECTION_MIN_ROWS" '3')

# Output formatting
if [ "$DISPLAY_COLOR_PALETTE" == "256" ]; then
	COLOR_RESET="[0;39;49m"
	COLOR_BOLD="[1m"
	COLOR_ULINE="[4m"
	COLOR_BOLD_OFF="[21m"
	COLOR_ULINE_OFF="[24m"
	COLOR_NORM="[0;39m"
	COLOR_GREN="[38;5;118m"
	COLOR_BLUE="[38;5;81m"
	COLOR_RED="[38;5;161m"
	COLOR_PURP="[38;5;135m"
	COLOR_ORNG="[38;5;208m"
	COLOR_YELO="[38;5;227m"
	COLOR_GRAY="[38;5;245m"
	COLOR_WHIT="[38;5;15m"
elif [ "$DISPLAY_COLOR_PALETTE" == "8" ]; then
	COLOR_RESET="[0;39;49m"
	COLOR_BOLD="[1m"
	COLOR_ULINE="[4m"
	COLOR_BOLD_OFF="[21m"
	COLOR_ULINE_OFF="[24m"
	COLOR_NORM="[0;39m"
	COLOR_GREN="[32m"
	COLOR_BLUE="[34m"
	COLOR_RED="[31m"
	COLOR_PURP="[35m"
	COLOR_ORNG="[33m"
	COLOR_YELO="[33m"
	COLOR_GRAY="[37m"
	COLOR_WHIT="[1;37m"
else
	COLOR_RESET=""
	COLOR_BOLD=""
	COLOR_ULINE=""
	COLOR_BOLD_OFF=""
	COLOR_ULINE_OFF=""
	COLOR_NORM=""
	COLOR_GREN=""
	COLOR_BLUE=""
	COLOR_RED=""
	COLOR_PURP=""
	COLOR_ORNG=""
	COLOR_GRAY=""
fi
function msg(){
	echo -e "$COLOR_RESET$COLOR_GRAY[Dash]$COLOR_NORM $1\n"
}
function error(){
	echo -e "$COLOR_RESET$COLOR_GRAY[Dash] $COLOR_RED""Error:$COLOR_NORM $1\n"\
		>&2
	if [[ -z "$2" ]]; then exit 1; fi; exit "$2"
}
function center(){
	LEN=$(wc -m <<< "$1")
	printf "%*s%s\n" $(( ($2 - $LEN + 1) / 2)) " " "$1"
}

# Support functions
function GCD(){
	if [ $# -ne 2 ]; then error "GCD() got incorrect arg count"; fi
	NUM=$1
	DEN=$2
	REM=$((NUM%DEN))
	until [ "$REM" -eq 0 ]; do
		NUM=$DEN
		DEN=$REM
		REM=$((NUM%DEN))
	done
	echo $DEN
}
function randomize(){
	LEN=$(( (${#1}>10?10:${#1}) - 1 ))
	RET=""
	for i in `seq 0 $(($2 - 1))`; do
		POS=$(grep -aom1 "[0-$LEN]" '/dev/urandom' | head -n 1)
		RET="$RET"${1:$POS:1}
	done
	echo $RET
}

# Handle CLI args
SHOW_HELP=0
if [ "$#" -lt 1 ]; then SHOW_HELP=1; fi
SECT_LIST=''
SHOW_CALENDAR=0
SHOW_EMAIL=0
SHOW_NEWS=0
SHOW_WEATHER=0
SHOW_STATS=0
SHOW_SNAKE=0
while getopt -Q -q -o 'HCENWYTSdz:' -n 'dash' -- $@; do
	case "$1" in
		-H) SHOW_HELP=1;     SECT_LIST+='H'; shift ;;
		-C) SHOW_CALENDAR=1; SECT_LIST+='C'; shift ;;
		-E) SHOW_EMAIL=1;    SECT_LIST+='E'; shift ;;
		-N) SHOW_NEWS=1;     SECT_LIST+='N'; shift ;;
		-W) SHOW_WEATHER=1;  SECT_LIST+='W'; shift ;;
		-Y) SHOW_STATS=1;    SECT_LIST+='Y'; shift ;;
		-S) SHOW_SNAKE=1;    SECT_LIST+='S'; shift ;;
		-z) ZIPCODE=$2; shift 2 ;;
		-d) DBG=1; shift ;;
		""|--) shift; break ;;
		*) error "Unrecognized option $1" ;;
	esac
done
if [[ -n "$1" ]]; then error "Unrecognized option $1"; fi
SECT_LIST=`echo $SECT_LIST | grep -o .`

# Only in the case of the help menu being requested, print help and exit
if [ "$SHOW_HELP" = 1 ]; then
	echo -e "[1mSYNOPSIS[0m\n\
\t[1mdash[0m [[4moptions[0m]\n\n\
[1mOPTIONS[0m\n\
\t[1m-C[0m\n\
\t\tInclude a calendar readout in the output (you will be prompted for \
credentials).\n\n\
\t[1m-d[0m\n\
\t\tPrint debugging information (overrides value in dash.ini). No sections \
will be shown.\n\n\
\t[1m-E[0m\n\
\t\tInclude an email digest in the output (you will be prompted for \
credentials).\n\n\
\t[1m-H[0m\n\
\t\tOuput these instructions, and exit.\n\n\
\t[1m-N[0m\n\
\t\tInclude a news digest in the output.\n\n\
\t[1m-S[0m\n\
\t\tInclude snake!\n\n\
\t[1m-W[0m\n\
\t\tInclude a weather forecast in the output.\n\n\
\t[1m-Y[0m\n\
\t\tInclude system stats in the output (output may be reduced if run without \
privileges).\n"
	exit
fi

# Additional configuration for individual sections
if [ "$SHOW_CALENDAR" = 1 ]; then
	:
fi
if [ "$SHOW_EMAIL" = 1 ]; then
	:
fi
if [ "$SHOW_NEWS" = 1 ]; then
	:
fi
if [ "$SHOW_WEATHER" = 1 ]; then
	# Get INI values
	WEATHER_SECONDS_PER_POLL=$(load_config "WEATHER_SECONDS_PER_POLL" "600")
	WEATHER_NOAA_STATION_CODE=$(load_config "WEATHER_NOAA_STATION_CODE" "KNYC")
	WEATHER_TEMPERATURE_UNITS=$(load_config "WEATHER_TEMPERATURE_UNITS" "F")
	if [ "$WEATHER_TEMPERATURE_UNITS" == 'F' ]; then
		WEATHER_TEMPERATURE_OFFSET=0
	else
		WEATHER_TEMPERATURE_OFFSET=1
		WEATHER_TEMPERATURE_UNITS='C'
	fi
	if [ "$DISPLAY_ENCODING" == 'UTF8' ]; then
		WEATHER_DEGREE_SYMBOL="°"
		WEATHER_DEGREE_WIDTH=2
	else
		WEATHER_DEGREE_SYMBOL="'"
		WEATHER_DEGREE_WIDTH=1
	fi
fi
if [ "$SHOW_STATS" = 1 ]; then
	:
fi
if [ "$SHOW_SNAKE" = 1 ]; then
	:
fi

# Clear the screen once
clear
SECTS=$(wc -l <<< "$SECT_LIST")
STARTED=0

# Loop the section processing code ad infinitum (exit with CTRL+c)
while true; do
	# Get loop params from shell
	NEW_DATE=`date +%s`
	COLS=`tput cols`
	ROWS=`tput lines`

	# Make sure there is enough space for anything
	if [ "$COLS" -lt "$SECTION_MIN_COLS" ] ||\
			[ "$ROWS" -lt "$SECTION_MIN_ROWS" ]; then
		clear
		msg "Not enough space!"
		sleep $REFRESH_RATE_SECONDS
		continue
	fi

	# Compute optimal size per section
	TEMP_WIDTH=$(( (3*SECTION_MIN_COLS/2)*(ROWS/COLS) + SECTION_MIN_COLS ))
	while [ "$((COLS/TEMP_WIDTH))" -gt "$SECTS" ]; do
		((TEMP_WIDTH+=10))
	done
	SECTS_X=$((COLS/TEMP_WIDTH))
	SECTS_Y=$((SECTS/SECTS_X + (SECTS%SECTS_X ? 1 : 0)))
	BASE_COLS=$((COLS/SECTS_X))
	BASE_ROWS=$((ROWS/SECTS_Y))
	EXTRA_X=$((COLS-SECTS_X*BASE_COLS))
	EXTRA_Y=$((ROWS-SECTS_Y*BASE_ROWS))
	SECTS_PROCESSED=0
	ROWS_PROCESSED=0
	COLS_PROCESSED=0

	# Make sure there is enough space for optimal layout
	if [ "$COLS" -lt "$(( (SECTION_MIN_COLS+1)*SECTS_X-1 ))" ]\
			|| [ "$ROWS" -lt "$(( (SECTION_MIN_ROWS+1)*SECTS_Y-1 ))" ]; then
		clear
		msg "Not enough space!"
		sleep $REFRESH_RATE_SECONDS
		continue
	fi

	# Print debugging info about all section metrics
	if [ "$DBG" = 1 ]; then
		msg "Sections: $SECTS"
		msg "Layout: $SECTS_X x $SECTS_Y"
		msg "Size per section: $BASE_COLS x $BASE_ROWS"
		msg "Extra: $EXTRA_X, $EXTRA_Y"
	fi

	# Inner loop to handle each particular section
	for CUR_SECT in $SECT_LIST; do
		# Figure out the specific size of this section
		CUR_X=$((SECTS_PROCESSED%SECTS_X))
		CUR_Y=$((SECTS_PROCESSED/SECTS_X))
		BORDER_LEFT=$((CUR_X>0 ? 1 : 0))
		BORDER_TOP=$((CUR_Y>0 ? 1 : 0))
		CUR_COLS=$((BASE_COLS+(CUR_X+EXTRA_X>=SECTS_X ? 1 : 0)-BORDER_LEFT))
		CUR_ROWS=$((BASE_ROWS+(CUR_Y+EXTRA_Y>=SECTS_Y ? 1 : 0)-BORDER_TOP))
		NEW_SIZE=$CUR_COLS"x"$CUR_ROWS

		# Print debugging info about specific section
		if [ "$DBG" = 1 ]; then
			msg "Section '$CUR_SECT'  Size $NEW_SIZE"
		fi

		# Initialize freshness and printing vars
		DATA_FRESH=0
		SIZE_FRESH=0
		DATE=0
		DATA=''
		SIZE='0x0'
		DRAW=()
		NEW_DATA=''
		NEW_DRAW=()

		# Get seconds per poll for this section
# TODO: Get polling time by $CUR_SECT
SECONDS_PER_POLL=$WEATHER_SECONDS_PER_POLL

		# Check any previous data
		if [ -f "$DASH_ROOT/$CUR_SECT"".dash" ]; then
			# See if data is still fresh
			OLD_DATE=$(head -n 1 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
			OLD_DATA=$(head -n 2 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
			if [ $OLD_DATE -ge $((NEW_DATE-SECONDS_PER_POLL)) ];
				then
				DATA_FRESH=1

				# See if the display size is still correct
				OLD_SIZE=$(head -n 3 "$DASH_ROOT/$CUR_SECT"".dash" | tail -n 1)
				OLD_DRAW=$(tail -n +4 "$DASH_ROOT/$CUR_SECT"".dash")
				if [ $OLD_SIZE == $NEW_SIZE ]; then
					SIZE_FRESH=1
				fi
			fi
		fi

# TODO: Delete this when done testing
SIZE_FRESH=0
		# --- Calendar --------------------------------------
		if [ "$CUR_SECT" == 'C' ]; then
			echo -n ""
		fi

		# --- Email -----------------------------------------
		if [ "$CUR_SECT" == 'E' ]; then
			echo -n ""
		fi

		# --- News ------------------------------------------
		if [ "$CUR_SECT" == 'N' ]; then
			echo -n ""
		fi

		# --- Weather ---------------------------------------
		if [ "$CUR_SECT" == 'W' ]; then
			# If the data is old, download new data, otherwise use the old data
			if [ "$DATA_FRESH" = 0 ]; then
				URL="http://www.weather.gov/xml/current_obs/"
				DOWNLOAD=$(wget -q -O- "$URL$WEATHER_NOAA_STATION_CODE"".xml")
				D_cred=$(grep -oPm1 "(?<=<credit_URL>)[^<]*"\
					<<< "$DOWNLOAD")
				D_loc=$(grep -oPm1 "(?<=<location>)[^<]*"\
					<<< "$DOWNLOAD")
				D_lat=$(grep -oPm1 "(?<=<latitude>)[^<]*"\
					<<< "$DOWNLOAD")
				D_lon=$(grep -oPm1 "(?<=<longitude>)[^<]*"\
					<<< "$DOWNLOAD")
				D_time=$(grep -oPm1 "(?<=<observation_time_rfc822>)[^<]*"\
					<<< "$DOWNLOAD")
				D_weather=$(grep -oPm1 "(?<=<weather>)[^<]*"\
					<<< "$DOWNLOAD")
				D_temp_f=$(grep -oPm1 "(?<=<temp_f>)[^<]*"\
					<<< "$DOWNLOAD")
				D_temp_c=$(grep -oPm1 "(?<=<temp_c>)[^<]*"\
					<<< "$DOWNLOAD")
				D_hu=$(grep -oPm1 "(?<=<relative_humidity>)[^<]*"\
					<<< "$DOWNLOAD")
				D_w_dir=$(grep -oPm1 "(?<=<wind_dir>)[^<]*"\
					<<< "$DOWNLOAD")
				D_w_mph=$(grep -oPm1 "(?<=<wind_mph>)[^<]*"\
					<<< "$DOWNLOAD")
				D_chil_f=$(grep -oPm1 "(?<=<windchill_f>)[^<]*"\
					<<< "$DOWNLOAD")
				D_chil_c=$(grep -oPm1 "(?<=<windchill_c>)[^<]*"\
					<<< "$DOWNLOAD")
				D_vis=$(grep -oPm1 "(?<=<visibility_mi>)[^<]*"\
					<<< "$DOWNLOAD")
				if [ -z "$D_chil_f" ]; then D_chil_f='-'; fi
				if [ -z "$D_chil_c" ]; then D_chil_c='-'; fi
				NEW_DATA=$(echo "$D_weather;$D_temp_f;$D_temp_c;$D_chil_f;\
$D_chil_c;$D_hu;$D_time;$D_cred;$D_w_dir;$D_w_mph;$D_vis;$D_loc;$D_lat;$D_lon")
				DATA=$NEW_DATA
			else
				DATA=$OLD_DATA
			fi

			# If the drawing is old, redo it. In either case, store it
			if [ "$SIZE_FRESH" = 0 ]; then
				# Expand the data into an array, handling string escapes
				DATA_ESCAPED=${DATA// /$DISPLAY_ESCAPE_SPACE}
				DATA_ARRAY=(${DATA_ESCAPED//;/' '})
				for i in `seq 0 $((${#DATA_ARRAY[@]}-1))`; do
					DATA_ARRAY[$i]=${DATA_ARRAY[$i]//$DISPLAY_ESCAPE_SPACE/ }
				done

				# Create an empty array of rows
				NEW_DRAW=($DISPLAY_ESCAPE_SPACE$(printf\
					" $DISPLAY_ESCAPE_SPACE%.0s" $(seq 2 $CUR_ROWS)))
				for i in `seq 0 $((CUR_ROWS-1))`; do NEW_DRAW[$i]=""; done

				# Smallest heights (3-7): just show most relevant info
				if [ "$CUR_ROWS" -lt 8 ]; then
					# Row 0 shows the weather status
					NEW_DRAW[0]=$(center "${DATA_ARRAY[0]}" $CUR_COLS)

					# Row 1 shows the temperature
					NEW_DRAW[1]=${DATA_ARRAY[$((1+WEATHER_TEMPERATURE_OFFSET\
						))]}$WEATHER_DEGREE_SYMBOL$WEATHER_TEMPERATURE_UNITS
					if [ "${DATA_ARRAY[$((3+WEATHER_TEMPERATURE_OFFSET))]}" \
						!= '-' ]; then
						NEW_DRAW[1]=${NEW_DRAW[1]}"  (feels like "\
${DATA_ARRAY[3]}$WEATHER_DEGREE_SYMBOL")"
					fi
					NEW_DRAW[1]=$(center "${NEW_DRAW[1]}" $((CUR_COLS+\
						(1*$WEATHER_DEGREE_WIDTH))))

					# Row 2 shows the humidity
					NEW_DRAW[2]=$(center "Humidity: ${DATA_ARRAY[5]}%"\
						$CUR_COLS)

					# Row 3 shows the wind
					if [ "$CUR_ROWS" -gt 5 ]; then
						NEW_DRAW[3]=$(center "Wind: "${DATA_ARRAY[8]}\
" ${DATA_ARRAY[9]}mph" $CUR_COLS)
					fi

					# Row 4 shows visibility
					if [ "$CUR_ROWS" -gt 6 ]; then
						NEW_DRAW[4]=$(center "Visibility: ${DATA_ARRAY[10]}mi"\
							$CUR_COLS)
					fi

					# Row N-1 shows the update timestamp
					if [ "$CUR_ROWS" -gt 3 ]; then
						NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
							"${DATA_ARRAY[6]}" "+%I:%M%p") | ${DATA_ARRAY[7]}"\
							$CUR_COLS)
					fi

				# Medium heights (8-19): add some formatting
				elif [ "$CUR_ROWS" -lt 20 ]; then
					# Row 0 has a heading
					NEW_DRAW[0]=" $COLOR_GRAY["$COLOR_ULINE"Weather\
$COLOR_ULINE_OFF]$COLOR_NORM"

					# Rows 1-3 are the weather status and its border
					DECORATION_STRING=" "
					DECORATION_COLOR="$COLOR_NORM"
					if [ "${DATA_ARRAY[0]}" == "Fair" ]; then
						DECORATION_STRING="-$DISPLAY_ESCAPE_SPACE"
						DECORATION_COLOR="$COLOR_YELO"
					elif [ "${DATA_ARRAY[0]}" == "A Few Clouds" ]; then
						if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
							DECORATION_STRING="~☁$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
						else
							DECORATION_STRING="~3$DISPLAY_ESCAPE_SPACE\
$DISPLAY_ESCAPE_SPACE$DISPLAY_ESCAPE_SPACE"
						fi
						DECORATION_COLOR="$COLOR_WHIT"
					elif [ "${DATA_ARRAY[0]}" == "Partly Cloudy" ]; then
						if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
							DECORATION_STRING="☁~$DISPLAY_ESCAPE_SPACE"
						else
							DECORATION_STRING="3~$DISPLAY_ESCAPE_SPACE"
						fi
						DECORATION_COLOR="$COLOR_WHIT"
					elif [ "${DATA_ARRAY[0]}" == "Overcast" ]; then
						if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
							DECORATION_STRING="☁3$DISPLAY_ESCAPE_SPACE"
						else
							DECORATION_STRING="~3$DISPLAY_ESCAPE_SPACE"
						fi
						DECORATION_COLOR="$COLOR_GRAY"
					elif [ "${DATA_ARRAY[0]}" == "Rain" ]; then
						DECORATION_STRING='````'"'''\\\\\|"
						DECORATION_COLOR="$COLOR_BLUE"
					elif [ "${DATA_ARRAY[0]}" == "Snow" ]; then
						if [ "$DISPLAY_ENCODING" == "UTF8" ]; then
							DECORATION_STRING="❄❄.\"$DISPLAY_ESCAPE_SPACE"
						else
							DECORATION_STRING='"`.'"$DISPLAY_ESCAPE_SPACE"
						fi
						DECORATION_COLOR="$COLOR_WHIT"
					else
						DECORATION_STRING="?$DISPLAY_ESCAPE_SPACE"
						DECORATION_COLOR="$COLOR_NORM"
					fi
					NEW_DRAW[1]=$DECORATION_COLOR$(center $(randomize\
						$DECORATION_STRING $(( ${#DATA_ARRAY[0]}+4 )))\
						$CUR_COLS)$COLOR_NORM
					NEW_DRAW[3]=$DECORATION_COLOR$(center $(randomize\
						$DECORATION_STRING $(( ${#DATA_ARRAY[0]}+4 )))\
						$CUR_COLS)$COLOR_NORM
					NEW_DRAW[1]=${NEW_DRAW[1]//$DISPLAY_ESCAPE_SPACE/ }
					NEW_DRAW[3]=${NEW_DRAW[3]//$DISPLAY_ESCAPE_SPACE/ }
					NEW_DRAW[2]=$DECORATION_COLOR$(center\
						"${DECORATION_STRING:0:1} ${DATA_ARRAY[0]} \
${DECORATION_STRING:0:1}" $CUR_COLS)$COLOR_NORM

					# Row 4 is blank

					# Row 5 shows the temperature
					NEW_DRAW[5]=${DATA_ARRAY[$((1+WEATHER_TEMPERATURE_OFFSET\
						))]}$WEATHER_DEGREE_SYMBOL$WEATHER_TEMPERATURE_UNITS
					if [ "${DATA_ARRAY[$((3+WEATHER_TEMPERATURE_OFFSET))]}" \
						!= '-' ]; then
						NEW_DRAW[5]=${NEW_DRAW[5]}"  (feels like "\
${DATA_ARRAY[3]}$WEATHER_DEGREE_SYMBOL")"
					fi
					NEW_DRAW[5]=$(center "${NEW_DRAW[5]}" $((CUR_COLS+\
						(1*$WEATHER_DEGREE_WIDTH))))

					# Row 6 shows the humidity
					NEW_DRAW[6]=$(center "Humidity: ${DATA_ARRAY[5]}%"\
						$CUR_COLS)

					# Row 7 shows the wind
					if [ "$CUR_ROWS" -gt 9 ]; then
						NEW_DRAW[7]=$(center "Wind: "${DATA_ARRAY[8]}\
" ${DATA_ARRAY[9]}mph" $CUR_COLS)
					fi

					# Row 8 shows visibility
					if [ "$CUR_ROWS" -gt 10 ]; then
						NEW_DRAW[8]=$(center "Visibility: ${DATA_ARRAY[10]}mi"\
							$CUR_COLS)
					fi

					# Row N-2 shows the name of the observatory
					if [ "$CUR_ROWS" -gt 11 ]; then
						NEW_DRAW[$((CUR_ROWS-2))]=$(center\
							"From: ${DATA_ARRAY[11]}" $CUR_COLS)
					fi

					# Row N-1 shows the update timestamp
					if [ "$CUR_ROWS" -gt 7 ]; then
						NEW_DRAW[$((CUR_ROWS-1))]=$(center "Updated: $(date -d\
							"${DATA_ARRAY[6]}" "+%I:%M%p") | ${DATA_ARRAY[7]}"\
							$CUR_COLS)
					fi

#0 weather
#1 temp_f
#2 temp_c
#3 chill_f
#4 chill_c
#5 humidity
#6 time
#7 credit
#8 wind_direction
#9 wind_mph
#10 visibility_mi
#11 location
#12 latitude
#13 longitude

				# Largest heights (20+): the full Monty!
				else
# TODO: Formatting for large display
					# Row 0 shows the weather status
					NEW_DRAW[0]=$(center "${DATA_ARRAY[0]}" $CUR_COLS)
				fi
			fi
		fi

		# --- Stats -----------------------------------------
		if [ "$CUR_SECT" == 'Y' ]; then
			echo -n ""
		fi

		# --- Snake -----------------------------------------
		if [ "$CUR_SECT" == 'S' ]; then
			echo -n ""
		fi

		# Get the correct data and date
		if [ "$DATA_FRESH" = 0 ]; then
			if [ "$DBG" = 1 ]; then msg "New Data"; fi
			DATA=$NEW_DATA
			DATE=$NEW_DATE
		else
			if [ "$DBG" = 1 ]; then msg "Old Data"; fi
			DATA=$OLD_DATA
			DATE=$OLD_DATE
		fi

		# Get the correct size and drawing
		if [ "$SIZE_FRESH" = 0 ]; then
			if [ "$DBG" = 1 ]; then msg "New Drawing"; fi
			SIZE=$NEW_SIZE
			DRAW=("${NEW_DRAW[@]}")
		else
			if [ "$DBG" = 1 ]; then msg "Old Drawing"; fi
			SIZE=$OLD_SIZE
			DRAW=("${OLD_DRAW[@]}")
		fi

		# If anything has changed, write to the dash file and print it
		if [ "$((DATA_FRESH+SIZE_FRESH+STARTED))" -lt 3 ]; then
			# Print data to file
			echo "$DATE" > "$DASH_ROOT/$CUR_SECT"".dash"
			echo "$DATA" >> "$DASH_ROOT/$CUR_SECT"".dash"
			echo "$SIZE" >> "$DASH_ROOT/$CUR_SECT"".dash"
			printf '%s\n' "${DRAW[@]}"  >> "$DASH_ROOT/$CUR_SECT"".dash"

			if [ "$DBG" = 0 ]; then
				# Print top border as needed
				if [ "$BORDER_TOP" = 1 ]; then
					tput cup $ROWS_PROCESSED $COLS_PROCESSED
					if [ "$CUR_X" -gt 0 ]; then
						echo -n $DISPLAY_SEPARATOR_C;
					fi
					if [ "$DISPLAY_SEPARATOR_H" == "-" ]; then
						echo "$(head -c "$CUR_COLS" < "/dev/zero"|tr '\0' '-')"
					else
						printf "$DISPLAY_SEPARATOR_H%.0s" $(seq 1 $CUR_COLS)
					fi
				fi

				# Print left border and content
				for i in `seq 0 $((CUR_ROWS-1))`; do
					tput cup $((ROWS_PROCESSED+BORDER_TOP+i)) $COLS_PROCESSED
					if [ "$BORDER_LEFT" = 1 ]; then
						echo -n "$DISPLAY_SEPARATOR_V";
					fi
					echo -n "${DRAW[$i]}"
				done
			fi
		fi

		# Done with one section drawing
		if [ "$CUR_X" -eq "$((SECTS_X-1))" ]; then
			COLS_PROCESSED=0
			ROWS_PROCESSED=$((ROWS_PROCESSED+CUR_ROWS+BORDER_TOP))
		else
			COLS_PROCESSED=$((COLS_PROCESSED+CUR_COLS+BORDER_LEFT))
		fi
		((++SECTS_PROCESSED))
	done

	# Wait until the next refresh
	STARTED=1
	sleep $REFRESH_RATE_SECONDS

# Return to start of section processing
done
